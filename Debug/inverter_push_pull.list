
inverter_push_pull.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002104  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080021c4  080021c4  000121c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022c0  080022c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080022c0  080022c0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080022c0  080022c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022c0  080022c0  000122c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022c4  080022c4  000122c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080022c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000000c  080022d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  080022d4  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   000076e6  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001640  00000000  00000000  0002775d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e8  00000000  00000000  00028da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006d3  00000000  00000000  00029688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ebd8  00000000  00000000  00029d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000094ff  00000000  00000000  00038933  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005bbd8  00000000  00000000  00041e32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f70  00000000  00000000  0009da0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0009f97c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080021ac 	.word	0x080021ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080021ac 	.word	0x080021ac

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM14) {
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a19      	ldr	r2, [pc, #100]	; (8000294 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800022e:	4293      	cmp	r3, r2
 8000230:	d12b      	bne.n	800028a <HAL_TIM_PeriodElapsedCallback+0x6a>
    	if(count == QUANTS + 1) {
 8000232:	4b19      	ldr	r3, [pc, #100]	; (8000298 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	2b34      	cmp	r3, #52	; 0x34
 8000238:	d10e      	bne.n	8000258 <HAL_TIM_PeriodElapsedCallback+0x38>
    		TIM3->CCR1 = 0;
 800023a:	4b18      	ldr	r3, [pc, #96]	; (800029c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800023c:	2200      	movs	r2, #0
 800023e:	635a      	str	r2, [r3, #52]	; 0x34
    		TIM3->CCR2 = 0;
 8000240:	4b16      	ldr	r3, [pc, #88]	; (800029c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000242:	2200      	movs	r2, #0
 8000244:	639a      	str	r2, [r3, #56]	; 0x38
    		phase ^= 1;
 8000246:	4b16      	ldr	r3, [pc, #88]	; (80002a0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	2201      	movs	r2, #1
 800024c:	405a      	eors	r2, r3
 800024e:	4b14      	ldr	r3, [pc, #80]	; (80002a0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000250:	601a      	str	r2, [r3, #0]
    		count = 0;
 8000252:	4b11      	ldr	r3, [pc, #68]	; (8000298 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
    	}
    	if (phase == 0) {
 8000258:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d10a      	bne.n	8000276 <HAL_TIM_PeriodElapsedCallback+0x56>
    		TIM3->CCR1 = sintable[count++];
 8000260:	4b0d      	ldr	r3, [pc, #52]	; (8000298 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	1c59      	adds	r1, r3, #1
 8000266:	4a0c      	ldr	r2, [pc, #48]	; (8000298 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000268:	6011      	str	r1, [r2, #0]
 800026a:	4a0e      	ldr	r2, [pc, #56]	; (80002a4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800026c:	009b      	lsls	r3, r3, #2
 800026e:	589a      	ldr	r2, [r3, r2]
 8000270:	4b0a      	ldr	r3, [pc, #40]	; (800029c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000272:	635a      	str	r2, [r3, #52]	; 0x34
    	}
    	else {
    		TIM3->CCR2 = sintable[count++];
    	}
    }
}
 8000274:	e009      	b.n	800028a <HAL_TIM_PeriodElapsedCallback+0x6a>
    		TIM3->CCR2 = sintable[count++];
 8000276:	4b08      	ldr	r3, [pc, #32]	; (8000298 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	1c59      	adds	r1, r3, #1
 800027c:	4a06      	ldr	r2, [pc, #24]	; (8000298 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800027e:	6011      	str	r1, [r2, #0]
 8000280:	4a08      	ldr	r2, [pc, #32]	; (80002a4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000282:	009b      	lsls	r3, r3, #2
 8000284:	589a      	ldr	r2, [r3, r2]
 8000286:	4b05      	ldr	r3, [pc, #20]	; (800029c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000288:	639a      	str	r2, [r3, #56]	; 0x38
}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	46bd      	mov	sp, r7
 800028e:	b002      	add	sp, #8
 8000290:	bd80      	pop	{r7, pc}
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	40002000 	.word	0x40002000
 8000298:	200000bc 	.word	0x200000bc
 800029c:	40000400 	.word	0x40000400
 80002a0:	200000b8 	.word	0x200000b8
 80002a4:	080021c4 	.word	0x080021c4

080002a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ac:	f000 fa08 	bl	80006c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b0:	f000 f81a 	bl	80002e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b4:	f000 f8ea 	bl	800048c <MX_GPIO_Init>
  MX_TIM3_Init();
 80002b8:	f000 f856 	bl	8000368 <MX_TIM3_Init>
  MX_TIM14_Init();
 80002bc:	f000 f8c0 	bl	8000440 <MX_TIM14_Init>
  /* USER CODE BEGIN WHILE */

  /*for (int i=0; i<QUANTS; i++){
	  sintable[i] = 0;                 // Do it before timers start!!!
  }*/
  HAL_TIM_Base_Start_IT(&htim14);
 80002c0:	4b07      	ldr	r3, [pc, #28]	; (80002e0 <main+0x38>)
 80002c2:	0018      	movs	r0, r3
 80002c4:	f001 f93c 	bl	8001540 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <main+0x3c>)
 80002ca:	2100      	movs	r1, #0
 80002cc:	0018      	movs	r0, r3
 80002ce:	f001 f9cd 	bl	800166c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80002d2:	4b04      	ldr	r3, [pc, #16]	; (80002e4 <main+0x3c>)
 80002d4:	2104      	movs	r1, #4
 80002d6:	0018      	movs	r0, r3
 80002d8:	f001 f9c8 	bl	800166c <HAL_TIM_PWM_Start>


  while (1)
 80002dc:	e7fe      	b.n	80002dc <main+0x34>
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	20000070 	.word	0x20000070
 80002e4:	20000028 	.word	0x20000028

080002e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e8:	b590      	push	{r4, r7, lr}
 80002ea:	b091      	sub	sp, #68	; 0x44
 80002ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ee:	2410      	movs	r4, #16
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	0018      	movs	r0, r3
 80002f4:	2330      	movs	r3, #48	; 0x30
 80002f6:	001a      	movs	r2, r3
 80002f8:	2100      	movs	r1, #0
 80002fa:	f001 ff2b 	bl	8002154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fe:	003b      	movs	r3, r7
 8000300:	0018      	movs	r0, r3
 8000302:	2310      	movs	r3, #16
 8000304:	001a      	movs	r2, r3
 8000306:	2100      	movs	r1, #0
 8000308:	f001 ff24 	bl	8002154 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800030c:	0021      	movs	r1, r4
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2202      	movs	r2, #2
 8000312:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2201      	movs	r2, #1
 8000318:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2210      	movs	r2, #16
 800031e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000320:	187b      	adds	r3, r7, r1
 8000322:	2200      	movs	r2, #0
 8000324:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000326:	187b      	adds	r3, r7, r1
 8000328:	0018      	movs	r0, r3
 800032a:	f000 fc7b 	bl	8000c24 <HAL_RCC_OscConfig>
 800032e:	1e03      	subs	r3, r0, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000332:	f000 f8c3 	bl	80004bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000336:	003b      	movs	r3, r7
 8000338:	2207      	movs	r2, #7
 800033a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800033c:	003b      	movs	r3, r7
 800033e:	2200      	movs	r2, #0
 8000340:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000342:	003b      	movs	r3, r7
 8000344:	2200      	movs	r2, #0
 8000346:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000348:	003b      	movs	r3, r7
 800034a:	2200      	movs	r2, #0
 800034c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800034e:	003b      	movs	r3, r7
 8000350:	2100      	movs	r1, #0
 8000352:	0018      	movs	r0, r3
 8000354:	f000 ff80 	bl	8001258 <HAL_RCC_ClockConfig>
 8000358:	1e03      	subs	r3, r0, #0
 800035a:	d001      	beq.n	8000360 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800035c:	f000 f8ae 	bl	80004bc <Error_Handler>
  }
}
 8000360:	46c0      	nop			; (mov r8, r8)
 8000362:	46bd      	mov	sp, r7
 8000364:	b011      	add	sp, #68	; 0x44
 8000366:	bd90      	pop	{r4, r7, pc}

08000368 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b08a      	sub	sp, #40	; 0x28
 800036c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800036e:	2320      	movs	r3, #32
 8000370:	18fb      	adds	r3, r7, r3
 8000372:	0018      	movs	r0, r3
 8000374:	2308      	movs	r3, #8
 8000376:	001a      	movs	r2, r3
 8000378:	2100      	movs	r1, #0
 800037a:	f001 feeb 	bl	8002154 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	0018      	movs	r0, r3
 8000382:	231c      	movs	r3, #28
 8000384:	001a      	movs	r2, r3
 8000386:	2100      	movs	r1, #0
 8000388:	f001 fee4 	bl	8002154 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800038c:	4b29      	ldr	r3, [pc, #164]	; (8000434 <MX_TIM3_Init+0xcc>)
 800038e:	4a2a      	ldr	r2, [pc, #168]	; (8000438 <MX_TIM3_Init+0xd0>)
 8000390:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000392:	4b28      	ldr	r3, [pc, #160]	; (8000434 <MX_TIM3_Init+0xcc>)
 8000394:	2200      	movs	r2, #0
 8000396:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000398:	4b26      	ldr	r3, [pc, #152]	; (8000434 <MX_TIM3_Init+0xcc>)
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1569;
 800039e:	4b25      	ldr	r3, [pc, #148]	; (8000434 <MX_TIM3_Init+0xcc>)
 80003a0:	4a26      	ldr	r2, [pc, #152]	; (800043c <MX_TIM3_Init+0xd4>)
 80003a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003a4:	4b23      	ldr	r3, [pc, #140]	; (8000434 <MX_TIM3_Init+0xcc>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003aa:	4b22      	ldr	r3, [pc, #136]	; (8000434 <MX_TIM3_Init+0xcc>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80003b0:	4b20      	ldr	r3, [pc, #128]	; (8000434 <MX_TIM3_Init+0xcc>)
 80003b2:	0018      	movs	r0, r3
 80003b4:	f001 f90a 	bl	80015cc <HAL_TIM_PWM_Init>
 80003b8:	1e03      	subs	r3, r0, #0
 80003ba:	d001      	beq.n	80003c0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80003bc:	f000 f87e 	bl	80004bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003c0:	2120      	movs	r1, #32
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	2200      	movs	r2, #0
 80003cc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003ce:	187a      	adds	r2, r7, r1
 80003d0:	4b18      	ldr	r3, [pc, #96]	; (8000434 <MX_TIM3_Init+0xcc>)
 80003d2:	0011      	movs	r1, r2
 80003d4:	0018      	movs	r0, r3
 80003d6:	f001 fe5b 	bl	8002090 <HAL_TIMEx_MasterConfigSynchronization>
 80003da:	1e03      	subs	r3, r0, #0
 80003dc:	d001      	beq.n	80003e2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80003de:	f000 f86d 	bl	80004bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2260      	movs	r2, #96	; 0x60
 80003e6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2200      	movs	r2, #0
 80003ec:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	2200      	movs	r2, #0
 80003f8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003fa:	1d39      	adds	r1, r7, #4
 80003fc:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <MX_TIM3_Init+0xcc>)
 80003fe:	2200      	movs	r2, #0
 8000400:	0018      	movs	r0, r3
 8000402:	f001 faef 	bl	80019e4 <HAL_TIM_PWM_ConfigChannel>
 8000406:	1e03      	subs	r3, r0, #0
 8000408:	d001      	beq.n	800040e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800040a:	f000 f857 	bl	80004bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800040e:	1d39      	adds	r1, r7, #4
 8000410:	4b08      	ldr	r3, [pc, #32]	; (8000434 <MX_TIM3_Init+0xcc>)
 8000412:	2204      	movs	r2, #4
 8000414:	0018      	movs	r0, r3
 8000416:	f001 fae5 	bl	80019e4 <HAL_TIM_PWM_ConfigChannel>
 800041a:	1e03      	subs	r3, r0, #0
 800041c:	d001      	beq.n	8000422 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800041e:	f000 f84d 	bl	80004bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000422:	4b04      	ldr	r3, [pc, #16]	; (8000434 <MX_TIM3_Init+0xcc>)
 8000424:	0018      	movs	r0, r3
 8000426:	f000 f8b9 	bl	800059c <HAL_TIM_MspPostInit>

}
 800042a:	46c0      	nop			; (mov r8, r8)
 800042c:	46bd      	mov	sp, r7
 800042e:	b00a      	add	sp, #40	; 0x28
 8000430:	bd80      	pop	{r7, pc}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	20000028 	.word	0x20000028
 8000438:	40000400 	.word	0x40000400
 800043c:	00000621 	.word	0x00000621

08000440 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000444:	4b0e      	ldr	r3, [pc, #56]	; (8000480 <MX_TIM14_Init+0x40>)
 8000446:	4a0f      	ldr	r2, [pc, #60]	; (8000484 <MX_TIM14_Init+0x44>)
 8000448:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800044a:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <MX_TIM14_Init+0x40>)
 800044c:	2200      	movs	r2, #0
 800044e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000450:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <MX_TIM14_Init+0x40>)
 8000452:	2200      	movs	r2, #0
 8000454:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1569;
 8000456:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <MX_TIM14_Init+0x40>)
 8000458:	4a0b      	ldr	r2, [pc, #44]	; (8000488 <MX_TIM14_Init+0x48>)
 800045a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800045c:	4b08      	ldr	r3, [pc, #32]	; (8000480 <MX_TIM14_Init+0x40>)
 800045e:	2200      	movs	r2, #0
 8000460:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000462:	4b07      	ldr	r3, [pc, #28]	; (8000480 <MX_TIM14_Init+0x40>)
 8000464:	2200      	movs	r2, #0
 8000466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000468:	4b05      	ldr	r3, [pc, #20]	; (8000480 <MX_TIM14_Init+0x40>)
 800046a:	0018      	movs	r0, r3
 800046c:	f001 f818 	bl	80014a0 <HAL_TIM_Base_Init>
 8000470:	1e03      	subs	r3, r0, #0
 8000472:	d001      	beq.n	8000478 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000474:	f000 f822 	bl	80004bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000478:	46c0      	nop			; (mov r8, r8)
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	20000070 	.word	0x20000070
 8000484:	40002000 	.word	0x40002000
 8000488:	00000621 	.word	0x00000621

0800048c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000492:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <MX_GPIO_Init+0x2c>)
 8000494:	695a      	ldr	r2, [r3, #20]
 8000496:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <MX_GPIO_Init+0x2c>)
 8000498:	2180      	movs	r1, #128	; 0x80
 800049a:	0289      	lsls	r1, r1, #10
 800049c:	430a      	orrs	r2, r1
 800049e:	615a      	str	r2, [r3, #20]
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <MX_GPIO_Init+0x2c>)
 80004a2:	695a      	ldr	r2, [r3, #20]
 80004a4:	2380      	movs	r3, #128	; 0x80
 80004a6:	029b      	lsls	r3, r3, #10
 80004a8:	4013      	ands	r3, r2
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	46bd      	mov	sp, r7
 80004b2:	b002      	add	sp, #8
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	40021000 	.word	0x40021000

080004bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004c0:	b672      	cpsid	i
}
 80004c2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004c4:	e7fe      	b.n	80004c4 <Error_Handler+0x8>
	...

080004c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ce:	4b0f      	ldr	r3, [pc, #60]	; (800050c <HAL_MspInit+0x44>)
 80004d0:	699a      	ldr	r2, [r3, #24]
 80004d2:	4b0e      	ldr	r3, [pc, #56]	; (800050c <HAL_MspInit+0x44>)
 80004d4:	2101      	movs	r1, #1
 80004d6:	430a      	orrs	r2, r1
 80004d8:	619a      	str	r2, [r3, #24]
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <HAL_MspInit+0x44>)
 80004dc:	699b      	ldr	r3, [r3, #24]
 80004de:	2201      	movs	r2, #1
 80004e0:	4013      	ands	r3, r2
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e6:	4b09      	ldr	r3, [pc, #36]	; (800050c <HAL_MspInit+0x44>)
 80004e8:	69da      	ldr	r2, [r3, #28]
 80004ea:	4b08      	ldr	r3, [pc, #32]	; (800050c <HAL_MspInit+0x44>)
 80004ec:	2180      	movs	r1, #128	; 0x80
 80004ee:	0549      	lsls	r1, r1, #21
 80004f0:	430a      	orrs	r2, r1
 80004f2:	61da      	str	r2, [r3, #28]
 80004f4:	4b05      	ldr	r3, [pc, #20]	; (800050c <HAL_MspInit+0x44>)
 80004f6:	69da      	ldr	r2, [r3, #28]
 80004f8:	2380      	movs	r3, #128	; 0x80
 80004fa:	055b      	lsls	r3, r3, #21
 80004fc:	4013      	ands	r3, r2
 80004fe:	603b      	str	r3, [r7, #0]
 8000500:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	b002      	add	sp, #8
 8000508:	bd80      	pop	{r7, pc}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	40021000 	.word	0x40021000

08000510 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a09      	ldr	r2, [pc, #36]	; (8000544 <HAL_TIM_PWM_MspInit+0x34>)
 800051e:	4293      	cmp	r3, r2
 8000520:	d10b      	bne.n	800053a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000522:	4b09      	ldr	r3, [pc, #36]	; (8000548 <HAL_TIM_PWM_MspInit+0x38>)
 8000524:	69da      	ldr	r2, [r3, #28]
 8000526:	4b08      	ldr	r3, [pc, #32]	; (8000548 <HAL_TIM_PWM_MspInit+0x38>)
 8000528:	2102      	movs	r1, #2
 800052a:	430a      	orrs	r2, r1
 800052c:	61da      	str	r2, [r3, #28]
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_TIM_PWM_MspInit+0x38>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	2202      	movs	r2, #2
 8000534:	4013      	ands	r3, r2
 8000536:	60fb      	str	r3, [r7, #12]
 8000538:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	b004      	add	sp, #16
 8000540:	bd80      	pop	{r7, pc}
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	40000400 	.word	0x40000400
 8000548:	40021000 	.word	0x40021000

0800054c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a0e      	ldr	r2, [pc, #56]	; (8000594 <HAL_TIM_Base_MspInit+0x48>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d115      	bne.n	800058a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <HAL_TIM_Base_MspInit+0x4c>)
 8000560:	69da      	ldr	r2, [r3, #28]
 8000562:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <HAL_TIM_Base_MspInit+0x4c>)
 8000564:	2180      	movs	r1, #128	; 0x80
 8000566:	0049      	lsls	r1, r1, #1
 8000568:	430a      	orrs	r2, r1
 800056a:	61da      	str	r2, [r3, #28]
 800056c:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <HAL_TIM_Base_MspInit+0x4c>)
 800056e:	69da      	ldr	r2, [r3, #28]
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	4013      	ands	r3, r2
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	2100      	movs	r1, #0
 800057e:	2013      	movs	r0, #19
 8000580:	f000 f9ae 	bl	80008e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000584:	2013      	movs	r0, #19
 8000586:	f000 f9c0 	bl	800090a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	46bd      	mov	sp, r7
 800058e:	b004      	add	sp, #16
 8000590:	bd80      	pop	{r7, pc}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	40002000 	.word	0x40002000
 8000598:	40021000 	.word	0x40021000

0800059c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	b089      	sub	sp, #36	; 0x24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a4:	240c      	movs	r4, #12
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	0018      	movs	r0, r3
 80005aa:	2314      	movs	r3, #20
 80005ac:	001a      	movs	r2, r3
 80005ae:	2100      	movs	r1, #0
 80005b0:	f001 fdd0 	bl	8002154 <memset>
  if(htim->Instance==TIM3)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a15      	ldr	r2, [pc, #84]	; (8000610 <HAL_TIM_MspPostInit+0x74>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d124      	bne.n	8000608 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	4b15      	ldr	r3, [pc, #84]	; (8000614 <HAL_TIM_MspPostInit+0x78>)
 80005c0:	695a      	ldr	r2, [r3, #20]
 80005c2:	4b14      	ldr	r3, [pc, #80]	; (8000614 <HAL_TIM_MspPostInit+0x78>)
 80005c4:	2180      	movs	r1, #128	; 0x80
 80005c6:	0289      	lsls	r1, r1, #10
 80005c8:	430a      	orrs	r2, r1
 80005ca:	615a      	str	r2, [r3, #20]
 80005cc:	4b11      	ldr	r3, [pc, #68]	; (8000614 <HAL_TIM_MspPostInit+0x78>)
 80005ce:	695a      	ldr	r2, [r3, #20]
 80005d0:	2380      	movs	r3, #128	; 0x80
 80005d2:	029b      	lsls	r3, r3, #10
 80005d4:	4013      	ands	r3, r2
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005da:	0021      	movs	r1, r4
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	22c0      	movs	r2, #192	; 0xc0
 80005e0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2202      	movs	r2, #2
 80005e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2200      	movs	r2, #0
 80005f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2201      	movs	r2, #1
 80005f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fa:	187a      	adds	r2, r7, r1
 80005fc:	2390      	movs	r3, #144	; 0x90
 80005fe:	05db      	lsls	r3, r3, #23
 8000600:	0011      	movs	r1, r2
 8000602:	0018      	movs	r0, r3
 8000604:	f000 f99e 	bl	8000944 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000608:	46c0      	nop			; (mov r8, r8)
 800060a:	46bd      	mov	sp, r7
 800060c:	b009      	add	sp, #36	; 0x24
 800060e:	bd90      	pop	{r4, r7, pc}
 8000610:	40000400 	.word	0x40000400
 8000614:	40021000 	.word	0x40021000

08000618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800061c:	e7fe      	b.n	800061c <NMI_Handler+0x4>

0800061e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000622:	e7fe      	b.n	8000622 <HardFault_Handler+0x4>

08000624 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800063c:	f000 f888 	bl	8000750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800064c:	4b03      	ldr	r3, [pc, #12]	; (800065c <TIM14_IRQHandler+0x14>)
 800064e:	0018      	movs	r0, r3
 8000650:	f001 f8b2 	bl	80017b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000654:	46c0      	nop			; (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	20000070 	.word	0x20000070

08000660 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800066e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000670:	f7ff fff6 	bl	8000660 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000674:	480c      	ldr	r0, [pc, #48]	; (80006a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000676:	490d      	ldr	r1, [pc, #52]	; (80006ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000678:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <LoopForever+0xe>)
  movs r3, #0
 800067a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800067c:	e002      	b.n	8000684 <LoopCopyDataInit>

0800067e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800067e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000680:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000682:	3304      	adds	r3, #4

08000684 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000684:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000686:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000688:	d3f9      	bcc.n	800067e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800068a:	4a0a      	ldr	r2, [pc, #40]	; (80006b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800068c:	4c0a      	ldr	r4, [pc, #40]	; (80006b8 <LoopForever+0x16>)
  movs r3, #0
 800068e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000690:	e001      	b.n	8000696 <LoopFillZerobss>

08000692 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000692:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000694:	3204      	adds	r2, #4

08000696 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000696:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000698:	d3fb      	bcc.n	8000692 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800069a:	f001 fd63 	bl	8002164 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069e:	f7ff fe03 	bl	80002a8 <main>

080006a2 <LoopForever>:

LoopForever:
    b LoopForever
 80006a2:	e7fe      	b.n	80006a2 <LoopForever>
  ldr   r0, =_estack
 80006a4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80006a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006b0:	080022c8 	.word	0x080022c8
  ldr r2, =_sbss
 80006b4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006b8:	200000c4 	.word	0x200000c4

080006bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006bc:	e7fe      	b.n	80006bc <ADC1_IRQHandler>
	...

080006c0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <HAL_Init+0x24>)
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <HAL_Init+0x24>)
 80006ca:	2110      	movs	r1, #16
 80006cc:	430a      	orrs	r2, r1
 80006ce:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80006d0:	2003      	movs	r0, #3
 80006d2:	f000 f809 	bl	80006e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006d6:	f7ff fef7 	bl	80004c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006da:	2300      	movs	r3, #0
}
 80006dc:	0018      	movs	r0, r3
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	40022000 	.word	0x40022000

080006e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006e8:	b590      	push	{r4, r7, lr}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006f0:	4b14      	ldr	r3, [pc, #80]	; (8000744 <HAL_InitTick+0x5c>)
 80006f2:	681c      	ldr	r4, [r3, #0]
 80006f4:	4b14      	ldr	r3, [pc, #80]	; (8000748 <HAL_InitTick+0x60>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	0019      	movs	r1, r3
 80006fa:	23fa      	movs	r3, #250	; 0xfa
 80006fc:	0098      	lsls	r0, r3, #2
 80006fe:	f7ff fd03 	bl	8000108 <__udivsi3>
 8000702:	0003      	movs	r3, r0
 8000704:	0019      	movs	r1, r3
 8000706:	0020      	movs	r0, r4
 8000708:	f7ff fcfe 	bl	8000108 <__udivsi3>
 800070c:	0003      	movs	r3, r0
 800070e:	0018      	movs	r0, r3
 8000710:	f000 f90b 	bl	800092a <HAL_SYSTICK_Config>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000718:	2301      	movs	r3, #1
 800071a:	e00f      	b.n	800073c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2b03      	cmp	r3, #3
 8000720:	d80b      	bhi.n	800073a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000722:	6879      	ldr	r1, [r7, #4]
 8000724:	2301      	movs	r3, #1
 8000726:	425b      	negs	r3, r3
 8000728:	2200      	movs	r2, #0
 800072a:	0018      	movs	r0, r3
 800072c:	f000 f8d8 	bl	80008e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <HAL_InitTick+0x64>)
 8000732:	687a      	ldr	r2, [r7, #4]
 8000734:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000736:	2300      	movs	r3, #0
 8000738:	e000      	b.n	800073c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800073a:	2301      	movs	r3, #1
}
 800073c:	0018      	movs	r0, r3
 800073e:	46bd      	mov	sp, r7
 8000740:	b003      	add	sp, #12
 8000742:	bd90      	pop	{r4, r7, pc}
 8000744:	20000000 	.word	0x20000000
 8000748:	20000008 	.word	0x20000008
 800074c:	20000004 	.word	0x20000004

08000750 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <HAL_IncTick+0x1c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	001a      	movs	r2, r3
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <HAL_IncTick+0x20>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	18d2      	adds	r2, r2, r3
 8000760:	4b03      	ldr	r3, [pc, #12]	; (8000770 <HAL_IncTick+0x20>)
 8000762:	601a      	str	r2, [r3, #0]
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	20000008 	.word	0x20000008
 8000770:	200000c0 	.word	0x200000c0

08000774 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  return uwTick;
 8000778:	4b02      	ldr	r3, [pc, #8]	; (8000784 <HAL_GetTick+0x10>)
 800077a:	681b      	ldr	r3, [r3, #0]
}
 800077c:	0018      	movs	r0, r3
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	200000c0 	.word	0x200000c0

08000788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	0002      	movs	r2, r0
 8000790:	1dfb      	adds	r3, r7, #7
 8000792:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000794:	1dfb      	adds	r3, r7, #7
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b7f      	cmp	r3, #127	; 0x7f
 800079a:	d809      	bhi.n	80007b0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800079c:	1dfb      	adds	r3, r7, #7
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	001a      	movs	r2, r3
 80007a2:	231f      	movs	r3, #31
 80007a4:	401a      	ands	r2, r3
 80007a6:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <__NVIC_EnableIRQ+0x30>)
 80007a8:	2101      	movs	r1, #1
 80007aa:	4091      	lsls	r1, r2
 80007ac:	000a      	movs	r2, r1
 80007ae:	601a      	str	r2, [r3, #0]
  }
}
 80007b0:	46c0      	nop			; (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b002      	add	sp, #8
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	e000e100 	.word	0xe000e100

080007bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007bc:	b590      	push	{r4, r7, lr}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	0002      	movs	r2, r0
 80007c4:	6039      	str	r1, [r7, #0]
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007ca:	1dfb      	adds	r3, r7, #7
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b7f      	cmp	r3, #127	; 0x7f
 80007d0:	d828      	bhi.n	8000824 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007d2:	4a2f      	ldr	r2, [pc, #188]	; (8000890 <__NVIC_SetPriority+0xd4>)
 80007d4:	1dfb      	adds	r3, r7, #7
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	b25b      	sxtb	r3, r3
 80007da:	089b      	lsrs	r3, r3, #2
 80007dc:	33c0      	adds	r3, #192	; 0xc0
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	589b      	ldr	r3, [r3, r2]
 80007e2:	1dfa      	adds	r2, r7, #7
 80007e4:	7812      	ldrb	r2, [r2, #0]
 80007e6:	0011      	movs	r1, r2
 80007e8:	2203      	movs	r2, #3
 80007ea:	400a      	ands	r2, r1
 80007ec:	00d2      	lsls	r2, r2, #3
 80007ee:	21ff      	movs	r1, #255	; 0xff
 80007f0:	4091      	lsls	r1, r2
 80007f2:	000a      	movs	r2, r1
 80007f4:	43d2      	mvns	r2, r2
 80007f6:	401a      	ands	r2, r3
 80007f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	019b      	lsls	r3, r3, #6
 80007fe:	22ff      	movs	r2, #255	; 0xff
 8000800:	401a      	ands	r2, r3
 8000802:	1dfb      	adds	r3, r7, #7
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	0018      	movs	r0, r3
 8000808:	2303      	movs	r3, #3
 800080a:	4003      	ands	r3, r0
 800080c:	00db      	lsls	r3, r3, #3
 800080e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000810:	481f      	ldr	r0, [pc, #124]	; (8000890 <__NVIC_SetPriority+0xd4>)
 8000812:	1dfb      	adds	r3, r7, #7
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	b25b      	sxtb	r3, r3
 8000818:	089b      	lsrs	r3, r3, #2
 800081a:	430a      	orrs	r2, r1
 800081c:	33c0      	adds	r3, #192	; 0xc0
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000822:	e031      	b.n	8000888 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000824:	4a1b      	ldr	r2, [pc, #108]	; (8000894 <__NVIC_SetPriority+0xd8>)
 8000826:	1dfb      	adds	r3, r7, #7
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	0019      	movs	r1, r3
 800082c:	230f      	movs	r3, #15
 800082e:	400b      	ands	r3, r1
 8000830:	3b08      	subs	r3, #8
 8000832:	089b      	lsrs	r3, r3, #2
 8000834:	3306      	adds	r3, #6
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	18d3      	adds	r3, r2, r3
 800083a:	3304      	adds	r3, #4
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	1dfa      	adds	r2, r7, #7
 8000840:	7812      	ldrb	r2, [r2, #0]
 8000842:	0011      	movs	r1, r2
 8000844:	2203      	movs	r2, #3
 8000846:	400a      	ands	r2, r1
 8000848:	00d2      	lsls	r2, r2, #3
 800084a:	21ff      	movs	r1, #255	; 0xff
 800084c:	4091      	lsls	r1, r2
 800084e:	000a      	movs	r2, r1
 8000850:	43d2      	mvns	r2, r2
 8000852:	401a      	ands	r2, r3
 8000854:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	019b      	lsls	r3, r3, #6
 800085a:	22ff      	movs	r2, #255	; 0xff
 800085c:	401a      	ands	r2, r3
 800085e:	1dfb      	adds	r3, r7, #7
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	0018      	movs	r0, r3
 8000864:	2303      	movs	r3, #3
 8000866:	4003      	ands	r3, r0
 8000868:	00db      	lsls	r3, r3, #3
 800086a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800086c:	4809      	ldr	r0, [pc, #36]	; (8000894 <__NVIC_SetPriority+0xd8>)
 800086e:	1dfb      	adds	r3, r7, #7
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	001c      	movs	r4, r3
 8000874:	230f      	movs	r3, #15
 8000876:	4023      	ands	r3, r4
 8000878:	3b08      	subs	r3, #8
 800087a:	089b      	lsrs	r3, r3, #2
 800087c:	430a      	orrs	r2, r1
 800087e:	3306      	adds	r3, #6
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	18c3      	adds	r3, r0, r3
 8000884:	3304      	adds	r3, #4
 8000886:	601a      	str	r2, [r3, #0]
}
 8000888:	46c0      	nop			; (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	b003      	add	sp, #12
 800088e:	bd90      	pop	{r4, r7, pc}
 8000890:	e000e100 	.word	0xe000e100
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	1e5a      	subs	r2, r3, #1
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	045b      	lsls	r3, r3, #17
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d301      	bcc.n	80008b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ac:	2301      	movs	r3, #1
 80008ae:	e010      	b.n	80008d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008b0:	4b0a      	ldr	r3, [pc, #40]	; (80008dc <SysTick_Config+0x44>)
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	3a01      	subs	r2, #1
 80008b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008b8:	2301      	movs	r3, #1
 80008ba:	425b      	negs	r3, r3
 80008bc:	2103      	movs	r1, #3
 80008be:	0018      	movs	r0, r3
 80008c0:	f7ff ff7c 	bl	80007bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c4:	4b05      	ldr	r3, [pc, #20]	; (80008dc <SysTick_Config+0x44>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ca:	4b04      	ldr	r3, [pc, #16]	; (80008dc <SysTick_Config+0x44>)
 80008cc:	2207      	movs	r2, #7
 80008ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	0018      	movs	r0, r3
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b002      	add	sp, #8
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	e000e010 	.word	0xe000e010

080008e0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60b9      	str	r1, [r7, #8]
 80008e8:	607a      	str	r2, [r7, #4]
 80008ea:	210f      	movs	r1, #15
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	1c02      	adds	r2, r0, #0
 80008f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b25b      	sxtb	r3, r3
 80008fa:	0011      	movs	r1, r2
 80008fc:	0018      	movs	r0, r3
 80008fe:	f7ff ff5d 	bl	80007bc <__NVIC_SetPriority>
}
 8000902:	46c0      	nop			; (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	b004      	add	sp, #16
 8000908:	bd80      	pop	{r7, pc}

0800090a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b082      	sub	sp, #8
 800090e:	af00      	add	r7, sp, #0
 8000910:	0002      	movs	r2, r0
 8000912:	1dfb      	adds	r3, r7, #7
 8000914:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000916:	1dfb      	adds	r3, r7, #7
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	b25b      	sxtb	r3, r3
 800091c:	0018      	movs	r0, r3
 800091e:	f7ff ff33 	bl	8000788 <__NVIC_EnableIRQ>
}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	b002      	add	sp, #8
 8000928:	bd80      	pop	{r7, pc}

0800092a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b082      	sub	sp, #8
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	0018      	movs	r0, r3
 8000936:	f7ff ffaf 	bl	8000898 <SysTick_Config>
 800093a:	0003      	movs	r3, r0
}
 800093c:	0018      	movs	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	b002      	add	sp, #8
 8000942:	bd80      	pop	{r7, pc}

08000944 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000952:	e14f      	b.n	8000bf4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	2101      	movs	r1, #1
 800095a:	697a      	ldr	r2, [r7, #20]
 800095c:	4091      	lsls	r1, r2
 800095e:	000a      	movs	r2, r1
 8000960:	4013      	ands	r3, r2
 8000962:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d100      	bne.n	800096c <HAL_GPIO_Init+0x28>
 800096a:	e140      	b.n	8000bee <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	2203      	movs	r2, #3
 8000972:	4013      	ands	r3, r2
 8000974:	2b01      	cmp	r3, #1
 8000976:	d005      	beq.n	8000984 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	2203      	movs	r2, #3
 800097e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000980:	2b02      	cmp	r3, #2
 8000982:	d130      	bne.n	80009e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	2203      	movs	r2, #3
 8000990:	409a      	lsls	r2, r3
 8000992:	0013      	movs	r3, r2
 8000994:	43da      	mvns	r2, r3
 8000996:	693b      	ldr	r3, [r7, #16]
 8000998:	4013      	ands	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	68da      	ldr	r2, [r3, #12]
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	409a      	lsls	r2, r3
 80009a6:	0013      	movs	r3, r2
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009ba:	2201      	movs	r2, #1
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	409a      	lsls	r2, r3
 80009c0:	0013      	movs	r3, r2
 80009c2:	43da      	mvns	r2, r3
 80009c4:	693b      	ldr	r3, [r7, #16]
 80009c6:	4013      	ands	r3, r2
 80009c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	091b      	lsrs	r3, r3, #4
 80009d0:	2201      	movs	r2, #1
 80009d2:	401a      	ands	r2, r3
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	409a      	lsls	r2, r3
 80009d8:	0013      	movs	r3, r2
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	4313      	orrs	r3, r2
 80009de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	2203      	movs	r2, #3
 80009ec:	4013      	ands	r3, r2
 80009ee:	2b03      	cmp	r3, #3
 80009f0:	d017      	beq.n	8000a22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	68db      	ldr	r3, [r3, #12]
 80009f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	2203      	movs	r2, #3
 80009fe:	409a      	lsls	r2, r3
 8000a00:	0013      	movs	r3, r2
 8000a02:	43da      	mvns	r2, r3
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	4013      	ands	r3, r2
 8000a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	689a      	ldr	r2, [r3, #8]
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	409a      	lsls	r2, r3
 8000a14:	0013      	movs	r3, r2
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	2203      	movs	r2, #3
 8000a28:	4013      	ands	r3, r2
 8000a2a:	2b02      	cmp	r3, #2
 8000a2c:	d123      	bne.n	8000a76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	08da      	lsrs	r2, r3, #3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3208      	adds	r2, #8
 8000a36:	0092      	lsls	r2, r2, #2
 8000a38:	58d3      	ldr	r3, [r2, r3]
 8000a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	2207      	movs	r2, #7
 8000a40:	4013      	ands	r3, r2
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	220f      	movs	r2, #15
 8000a46:	409a      	lsls	r2, r3
 8000a48:	0013      	movs	r3, r2
 8000a4a:	43da      	mvns	r2, r3
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	4013      	ands	r3, r2
 8000a50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	691a      	ldr	r2, [r3, #16]
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	2107      	movs	r1, #7
 8000a5a:	400b      	ands	r3, r1
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	409a      	lsls	r2, r3
 8000a60:	0013      	movs	r3, r2
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	08da      	lsrs	r2, r3, #3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3208      	adds	r2, #8
 8000a70:	0092      	lsls	r2, r2, #2
 8000a72:	6939      	ldr	r1, [r7, #16]
 8000a74:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	2203      	movs	r2, #3
 8000a82:	409a      	lsls	r2, r3
 8000a84:	0013      	movs	r3, r2
 8000a86:	43da      	mvns	r2, r3
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	2203      	movs	r2, #3
 8000a94:	401a      	ands	r2, r3
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	409a      	lsls	r2, r3
 8000a9c:	0013      	movs	r3, r2
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	693a      	ldr	r2, [r7, #16]
 8000aa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685a      	ldr	r2, [r3, #4]
 8000aae:	23c0      	movs	r3, #192	; 0xc0
 8000ab0:	029b      	lsls	r3, r3, #10
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	d100      	bne.n	8000ab8 <HAL_GPIO_Init+0x174>
 8000ab6:	e09a      	b.n	8000bee <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab8:	4b54      	ldr	r3, [pc, #336]	; (8000c0c <HAL_GPIO_Init+0x2c8>)
 8000aba:	699a      	ldr	r2, [r3, #24]
 8000abc:	4b53      	ldr	r3, [pc, #332]	; (8000c0c <HAL_GPIO_Init+0x2c8>)
 8000abe:	2101      	movs	r1, #1
 8000ac0:	430a      	orrs	r2, r1
 8000ac2:	619a      	str	r2, [r3, #24]
 8000ac4:	4b51      	ldr	r3, [pc, #324]	; (8000c0c <HAL_GPIO_Init+0x2c8>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	2201      	movs	r2, #1
 8000aca:	4013      	ands	r3, r2
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ad0:	4a4f      	ldr	r2, [pc, #316]	; (8000c10 <HAL_GPIO_Init+0x2cc>)
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	089b      	lsrs	r3, r3, #2
 8000ad6:	3302      	adds	r3, #2
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	589b      	ldr	r3, [r3, r2]
 8000adc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	2203      	movs	r2, #3
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	220f      	movs	r2, #15
 8000ae8:	409a      	lsls	r2, r3
 8000aea:	0013      	movs	r3, r2
 8000aec:	43da      	mvns	r2, r3
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	2390      	movs	r3, #144	; 0x90
 8000af8:	05db      	lsls	r3, r3, #23
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d013      	beq.n	8000b26 <HAL_GPIO_Init+0x1e2>
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a44      	ldr	r2, [pc, #272]	; (8000c14 <HAL_GPIO_Init+0x2d0>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d00d      	beq.n	8000b22 <HAL_GPIO_Init+0x1de>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4a43      	ldr	r2, [pc, #268]	; (8000c18 <HAL_GPIO_Init+0x2d4>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d007      	beq.n	8000b1e <HAL_GPIO_Init+0x1da>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a42      	ldr	r2, [pc, #264]	; (8000c1c <HAL_GPIO_Init+0x2d8>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d101      	bne.n	8000b1a <HAL_GPIO_Init+0x1d6>
 8000b16:	2303      	movs	r3, #3
 8000b18:	e006      	b.n	8000b28 <HAL_GPIO_Init+0x1e4>
 8000b1a:	2305      	movs	r3, #5
 8000b1c:	e004      	b.n	8000b28 <HAL_GPIO_Init+0x1e4>
 8000b1e:	2302      	movs	r3, #2
 8000b20:	e002      	b.n	8000b28 <HAL_GPIO_Init+0x1e4>
 8000b22:	2301      	movs	r3, #1
 8000b24:	e000      	b.n	8000b28 <HAL_GPIO_Init+0x1e4>
 8000b26:	2300      	movs	r3, #0
 8000b28:	697a      	ldr	r2, [r7, #20]
 8000b2a:	2103      	movs	r1, #3
 8000b2c:	400a      	ands	r2, r1
 8000b2e:	0092      	lsls	r2, r2, #2
 8000b30:	4093      	lsls	r3, r2
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b38:	4935      	ldr	r1, [pc, #212]	; (8000c10 <HAL_GPIO_Init+0x2cc>)
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	089b      	lsrs	r3, r3, #2
 8000b3e:	3302      	adds	r3, #2
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b46:	4b36      	ldr	r3, [pc, #216]	; (8000c20 <HAL_GPIO_Init+0x2dc>)
 8000b48:	689b      	ldr	r3, [r3, #8]
 8000b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	43da      	mvns	r2, r3
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	4013      	ands	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685a      	ldr	r2, [r3, #4]
 8000b5a:	2380      	movs	r3, #128	; 0x80
 8000b5c:	035b      	lsls	r3, r3, #13
 8000b5e:	4013      	ands	r3, r2
 8000b60:	d003      	beq.n	8000b6a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000b6a:	4b2d      	ldr	r3, [pc, #180]	; (8000c20 <HAL_GPIO_Init+0x2dc>)
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000b70:	4b2b      	ldr	r3, [pc, #172]	; (8000c20 <HAL_GPIO_Init+0x2dc>)
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	43da      	mvns	r2, r3
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685a      	ldr	r2, [r3, #4]
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	039b      	lsls	r3, r3, #14
 8000b88:	4013      	ands	r3, r2
 8000b8a:	d003      	beq.n	8000b94 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000b8c:	693a      	ldr	r2, [r7, #16]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b94:	4b22      	ldr	r3, [pc, #136]	; (8000c20 <HAL_GPIO_Init+0x2dc>)
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000b9a:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <HAL_GPIO_Init+0x2dc>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	43da      	mvns	r2, r3
 8000ba4:	693b      	ldr	r3, [r7, #16]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685a      	ldr	r2, [r3, #4]
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	029b      	lsls	r3, r3, #10
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	d003      	beq.n	8000bbe <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bbe:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <HAL_GPIO_Init+0x2dc>)
 8000bc0:	693a      	ldr	r2, [r7, #16]
 8000bc2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000bc4:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <HAL_GPIO_Init+0x2dc>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	43da      	mvns	r2, r3
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685a      	ldr	r2, [r3, #4]
 8000bd8:	2380      	movs	r3, #128	; 0x80
 8000bda:	025b      	lsls	r3, r3, #9
 8000bdc:	4013      	ands	r3, r2
 8000bde:	d003      	beq.n	8000be8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000be8:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <HAL_GPIO_Init+0x2dc>)
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	40da      	lsrs	r2, r3
 8000bfc:	1e13      	subs	r3, r2, #0
 8000bfe:	d000      	beq.n	8000c02 <HAL_GPIO_Init+0x2be>
 8000c00:	e6a8      	b.n	8000954 <HAL_GPIO_Init+0x10>
  } 
}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b006      	add	sp, #24
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	40010000 	.word	0x40010000
 8000c14:	48000400 	.word	0x48000400
 8000c18:	48000800 	.word	0x48000800
 8000c1c:	48000c00 	.word	0x48000c00
 8000c20:	40010400 	.word	0x40010400

08000c24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d101      	bne.n	8000c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e301      	b.n	800123a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	d100      	bne.n	8000c42 <HAL_RCC_OscConfig+0x1e>
 8000c40:	e08d      	b.n	8000d5e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c42:	4bc3      	ldr	r3, [pc, #780]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	220c      	movs	r2, #12
 8000c48:	4013      	ands	r3, r2
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	d00e      	beq.n	8000c6c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c4e:	4bc0      	ldr	r3, [pc, #768]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	220c      	movs	r2, #12
 8000c54:	4013      	ands	r3, r2
 8000c56:	2b08      	cmp	r3, #8
 8000c58:	d116      	bne.n	8000c88 <HAL_RCC_OscConfig+0x64>
 8000c5a:	4bbd      	ldr	r3, [pc, #756]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000c5c:	685a      	ldr	r2, [r3, #4]
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	025b      	lsls	r3, r3, #9
 8000c62:	401a      	ands	r2, r3
 8000c64:	2380      	movs	r3, #128	; 0x80
 8000c66:	025b      	lsls	r3, r3, #9
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d10d      	bne.n	8000c88 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c6c:	4bb8      	ldr	r3, [pc, #736]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	2380      	movs	r3, #128	; 0x80
 8000c72:	029b      	lsls	r3, r3, #10
 8000c74:	4013      	ands	r3, r2
 8000c76:	d100      	bne.n	8000c7a <HAL_RCC_OscConfig+0x56>
 8000c78:	e070      	b.n	8000d5c <HAL_RCC_OscConfig+0x138>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d000      	beq.n	8000c84 <HAL_RCC_OscConfig+0x60>
 8000c82:	e06b      	b.n	8000d5c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000c84:	2301      	movs	r3, #1
 8000c86:	e2d8      	b.n	800123a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d107      	bne.n	8000ca0 <HAL_RCC_OscConfig+0x7c>
 8000c90:	4baf      	ldr	r3, [pc, #700]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4bae      	ldr	r3, [pc, #696]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000c96:	2180      	movs	r1, #128	; 0x80
 8000c98:	0249      	lsls	r1, r1, #9
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	e02f      	b.n	8000d00 <HAL_RCC_OscConfig+0xdc>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d10c      	bne.n	8000cc2 <HAL_RCC_OscConfig+0x9e>
 8000ca8:	4ba9      	ldr	r3, [pc, #676]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4ba8      	ldr	r3, [pc, #672]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000cae:	49a9      	ldr	r1, [pc, #676]	; (8000f54 <HAL_RCC_OscConfig+0x330>)
 8000cb0:	400a      	ands	r2, r1
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	4ba6      	ldr	r3, [pc, #664]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4ba5      	ldr	r3, [pc, #660]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000cba:	49a7      	ldr	r1, [pc, #668]	; (8000f58 <HAL_RCC_OscConfig+0x334>)
 8000cbc:	400a      	ands	r2, r1
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	e01e      	b.n	8000d00 <HAL_RCC_OscConfig+0xdc>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	2b05      	cmp	r3, #5
 8000cc8:	d10e      	bne.n	8000ce8 <HAL_RCC_OscConfig+0xc4>
 8000cca:	4ba1      	ldr	r3, [pc, #644]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	4ba0      	ldr	r3, [pc, #640]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000cd0:	2180      	movs	r1, #128	; 0x80
 8000cd2:	02c9      	lsls	r1, r1, #11
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	4b9d      	ldr	r3, [pc, #628]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b9c      	ldr	r3, [pc, #624]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000cde:	2180      	movs	r1, #128	; 0x80
 8000ce0:	0249      	lsls	r1, r1, #9
 8000ce2:	430a      	orrs	r2, r1
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	e00b      	b.n	8000d00 <HAL_RCC_OscConfig+0xdc>
 8000ce8:	4b99      	ldr	r3, [pc, #612]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	4b98      	ldr	r3, [pc, #608]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000cee:	4999      	ldr	r1, [pc, #612]	; (8000f54 <HAL_RCC_OscConfig+0x330>)
 8000cf0:	400a      	ands	r2, r1
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	4b96      	ldr	r3, [pc, #600]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b95      	ldr	r3, [pc, #596]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000cfa:	4997      	ldr	r1, [pc, #604]	; (8000f58 <HAL_RCC_OscConfig+0x334>)
 8000cfc:	400a      	ands	r2, r1
 8000cfe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d014      	beq.n	8000d32 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d08:	f7ff fd34 	bl	8000774 <HAL_GetTick>
 8000d0c:	0003      	movs	r3, r0
 8000d0e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d10:	e008      	b.n	8000d24 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d12:	f7ff fd2f 	bl	8000774 <HAL_GetTick>
 8000d16:	0002      	movs	r2, r0
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	2b64      	cmp	r3, #100	; 0x64
 8000d1e:	d901      	bls.n	8000d24 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000d20:	2303      	movs	r3, #3
 8000d22:	e28a      	b.n	800123a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d24:	4b8a      	ldr	r3, [pc, #552]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	029b      	lsls	r3, r3, #10
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	d0f0      	beq.n	8000d12 <HAL_RCC_OscConfig+0xee>
 8000d30:	e015      	b.n	8000d5e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d32:	f7ff fd1f 	bl	8000774 <HAL_GetTick>
 8000d36:	0003      	movs	r3, r0
 8000d38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d3a:	e008      	b.n	8000d4e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d3c:	f7ff fd1a 	bl	8000774 <HAL_GetTick>
 8000d40:	0002      	movs	r2, r0
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b64      	cmp	r3, #100	; 0x64
 8000d48:	d901      	bls.n	8000d4e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e275      	b.n	800123a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d4e:	4b80      	ldr	r3, [pc, #512]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	2380      	movs	r3, #128	; 0x80
 8000d54:	029b      	lsls	r3, r3, #10
 8000d56:	4013      	ands	r3, r2
 8000d58:	d1f0      	bne.n	8000d3c <HAL_RCC_OscConfig+0x118>
 8000d5a:	e000      	b.n	8000d5e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d5c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2202      	movs	r2, #2
 8000d64:	4013      	ands	r3, r2
 8000d66:	d100      	bne.n	8000d6a <HAL_RCC_OscConfig+0x146>
 8000d68:	e069      	b.n	8000e3e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d6a:	4b79      	ldr	r3, [pc, #484]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	220c      	movs	r2, #12
 8000d70:	4013      	ands	r3, r2
 8000d72:	d00b      	beq.n	8000d8c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000d74:	4b76      	ldr	r3, [pc, #472]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	220c      	movs	r2, #12
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	2b08      	cmp	r3, #8
 8000d7e:	d11c      	bne.n	8000dba <HAL_RCC_OscConfig+0x196>
 8000d80:	4b73      	ldr	r3, [pc, #460]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	025b      	lsls	r3, r3, #9
 8000d88:	4013      	ands	r3, r2
 8000d8a:	d116      	bne.n	8000dba <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d8c:	4b70      	ldr	r3, [pc, #448]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2202      	movs	r2, #2
 8000d92:	4013      	ands	r3, r2
 8000d94:	d005      	beq.n	8000da2 <HAL_RCC_OscConfig+0x17e>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	68db      	ldr	r3, [r3, #12]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d001      	beq.n	8000da2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e24b      	b.n	800123a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da2:	4b6b      	ldr	r3, [pc, #428]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	22f8      	movs	r2, #248	; 0xf8
 8000da8:	4393      	bics	r3, r2
 8000daa:	0019      	movs	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	691b      	ldr	r3, [r3, #16]
 8000db0:	00da      	lsls	r2, r3, #3
 8000db2:	4b67      	ldr	r3, [pc, #412]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000db4:	430a      	orrs	r2, r1
 8000db6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000db8:	e041      	b.n	8000e3e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d024      	beq.n	8000e0c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dc2:	4b63      	ldr	r3, [pc, #396]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000dc4:	681a      	ldr	r2, [r3, #0]
 8000dc6:	4b62      	ldr	r3, [pc, #392]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000dc8:	2101      	movs	r1, #1
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dce:	f7ff fcd1 	bl	8000774 <HAL_GetTick>
 8000dd2:	0003      	movs	r3, r0
 8000dd4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd6:	e008      	b.n	8000dea <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dd8:	f7ff fccc 	bl	8000774 <HAL_GetTick>
 8000ddc:	0002      	movs	r2, r0
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d901      	bls.n	8000dea <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000de6:	2303      	movs	r3, #3
 8000de8:	e227      	b.n	800123a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dea:	4b59      	ldr	r3, [pc, #356]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2202      	movs	r2, #2
 8000df0:	4013      	ands	r3, r2
 8000df2:	d0f1      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df4:	4b56      	ldr	r3, [pc, #344]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	22f8      	movs	r2, #248	; 0xf8
 8000dfa:	4393      	bics	r3, r2
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	691b      	ldr	r3, [r3, #16]
 8000e02:	00da      	lsls	r2, r3, #3
 8000e04:	4b52      	ldr	r3, [pc, #328]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000e06:	430a      	orrs	r2, r1
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	e018      	b.n	8000e3e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e0c:	4b50      	ldr	r3, [pc, #320]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4b4f      	ldr	r3, [pc, #316]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000e12:	2101      	movs	r1, #1
 8000e14:	438a      	bics	r2, r1
 8000e16:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e18:	f7ff fcac 	bl	8000774 <HAL_GetTick>
 8000e1c:	0003      	movs	r3, r0
 8000e1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e20:	e008      	b.n	8000e34 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e22:	f7ff fca7 	bl	8000774 <HAL_GetTick>
 8000e26:	0002      	movs	r2, r0
 8000e28:	69bb      	ldr	r3, [r7, #24]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	d901      	bls.n	8000e34 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000e30:	2303      	movs	r3, #3
 8000e32:	e202      	b.n	800123a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e34:	4b46      	ldr	r3, [pc, #280]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2202      	movs	r2, #2
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	d1f1      	bne.n	8000e22 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2208      	movs	r2, #8
 8000e44:	4013      	ands	r3, r2
 8000e46:	d036      	beq.n	8000eb6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	69db      	ldr	r3, [r3, #28]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d019      	beq.n	8000e84 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e50:	4b3f      	ldr	r3, [pc, #252]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000e52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e54:	4b3e      	ldr	r3, [pc, #248]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000e56:	2101      	movs	r1, #1
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e5c:	f7ff fc8a 	bl	8000774 <HAL_GetTick>
 8000e60:	0003      	movs	r3, r0
 8000e62:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e64:	e008      	b.n	8000e78 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e66:	f7ff fc85 	bl	8000774 <HAL_GetTick>
 8000e6a:	0002      	movs	r2, r0
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d901      	bls.n	8000e78 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000e74:	2303      	movs	r3, #3
 8000e76:	e1e0      	b.n	800123a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e78:	4b35      	ldr	r3, [pc, #212]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	4013      	ands	r3, r2
 8000e80:	d0f1      	beq.n	8000e66 <HAL_RCC_OscConfig+0x242>
 8000e82:	e018      	b.n	8000eb6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e84:	4b32      	ldr	r3, [pc, #200]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000e86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e88:	4b31      	ldr	r3, [pc, #196]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	438a      	bics	r2, r1
 8000e8e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e90:	f7ff fc70 	bl	8000774 <HAL_GetTick>
 8000e94:	0003      	movs	r3, r0
 8000e96:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e98:	e008      	b.n	8000eac <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e9a:	f7ff fc6b 	bl	8000774 <HAL_GetTick>
 8000e9e:	0002      	movs	r2, r0
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d901      	bls.n	8000eac <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e1c6      	b.n	800123a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000eac:	4b28      	ldr	r3, [pc, #160]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	d1f1      	bne.n	8000e9a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2204      	movs	r2, #4
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	d100      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x29e>
 8000ec0:	e0b4      	b.n	800102c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ec2:	201f      	movs	r0, #31
 8000ec4:	183b      	adds	r3, r7, r0
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eca:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000ecc:	69da      	ldr	r2, [r3, #28]
 8000ece:	2380      	movs	r3, #128	; 0x80
 8000ed0:	055b      	lsls	r3, r3, #21
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d110      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ed6:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000ed8:	69da      	ldr	r2, [r3, #28]
 8000eda:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000edc:	2180      	movs	r1, #128	; 0x80
 8000ede:	0549      	lsls	r1, r1, #21
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	61da      	str	r2, [r3, #28]
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000ee6:	69da      	ldr	r2, [r3, #28]
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	055b      	lsls	r3, r3, #21
 8000eec:	4013      	ands	r3, r2
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ef2:	183b      	adds	r3, r7, r0
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ef8:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	2380      	movs	r3, #128	; 0x80
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4013      	ands	r3, r2
 8000f02:	d11a      	bne.n	8000f3a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000f0a:	2180      	movs	r1, #128	; 0x80
 8000f0c:	0049      	lsls	r1, r1, #1
 8000f0e:	430a      	orrs	r2, r1
 8000f10:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f12:	f7ff fc2f 	bl	8000774 <HAL_GetTick>
 8000f16:	0003      	movs	r3, r0
 8000f18:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f1a:	e008      	b.n	8000f2e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f1c:	f7ff fc2a 	bl	8000774 <HAL_GetTick>
 8000f20:	0002      	movs	r2, r0
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b64      	cmp	r3, #100	; 0x64
 8000f28:	d901      	bls.n	8000f2e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e185      	b.n	800123a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_RCC_OscConfig+0x338>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	2380      	movs	r3, #128	; 0x80
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4013      	ands	r3, r2
 8000f38:	d0f0      	beq.n	8000f1c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d10e      	bne.n	8000f60 <HAL_RCC_OscConfig+0x33c>
 8000f42:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000f44:	6a1a      	ldr	r2, [r3, #32]
 8000f46:	4b02      	ldr	r3, [pc, #8]	; (8000f50 <HAL_RCC_OscConfig+0x32c>)
 8000f48:	2101      	movs	r1, #1
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	621a      	str	r2, [r3, #32]
 8000f4e:	e035      	b.n	8000fbc <HAL_RCC_OscConfig+0x398>
 8000f50:	40021000 	.word	0x40021000
 8000f54:	fffeffff 	.word	0xfffeffff
 8000f58:	fffbffff 	.word	0xfffbffff
 8000f5c:	40007000 	.word	0x40007000
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d10c      	bne.n	8000f82 <HAL_RCC_OscConfig+0x35e>
 8000f68:	4bb6      	ldr	r3, [pc, #728]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8000f6a:	6a1a      	ldr	r2, [r3, #32]
 8000f6c:	4bb5      	ldr	r3, [pc, #724]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8000f6e:	2101      	movs	r1, #1
 8000f70:	438a      	bics	r2, r1
 8000f72:	621a      	str	r2, [r3, #32]
 8000f74:	4bb3      	ldr	r3, [pc, #716]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8000f76:	6a1a      	ldr	r2, [r3, #32]
 8000f78:	4bb2      	ldr	r3, [pc, #712]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8000f7a:	2104      	movs	r1, #4
 8000f7c:	438a      	bics	r2, r1
 8000f7e:	621a      	str	r2, [r3, #32]
 8000f80:	e01c      	b.n	8000fbc <HAL_RCC_OscConfig+0x398>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	2b05      	cmp	r3, #5
 8000f88:	d10c      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x380>
 8000f8a:	4bae      	ldr	r3, [pc, #696]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8000f8c:	6a1a      	ldr	r2, [r3, #32]
 8000f8e:	4bad      	ldr	r3, [pc, #692]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8000f90:	2104      	movs	r1, #4
 8000f92:	430a      	orrs	r2, r1
 8000f94:	621a      	str	r2, [r3, #32]
 8000f96:	4bab      	ldr	r3, [pc, #684]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8000f98:	6a1a      	ldr	r2, [r3, #32]
 8000f9a:	4baa      	ldr	r3, [pc, #680]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	621a      	str	r2, [r3, #32]
 8000fa2:	e00b      	b.n	8000fbc <HAL_RCC_OscConfig+0x398>
 8000fa4:	4ba7      	ldr	r3, [pc, #668]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8000fa6:	6a1a      	ldr	r2, [r3, #32]
 8000fa8:	4ba6      	ldr	r3, [pc, #664]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8000faa:	2101      	movs	r1, #1
 8000fac:	438a      	bics	r2, r1
 8000fae:	621a      	str	r2, [r3, #32]
 8000fb0:	4ba4      	ldr	r3, [pc, #656]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8000fb2:	6a1a      	ldr	r2, [r3, #32]
 8000fb4:	4ba3      	ldr	r3, [pc, #652]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8000fb6:	2104      	movs	r1, #4
 8000fb8:	438a      	bics	r2, r1
 8000fba:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d014      	beq.n	8000fee <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fc4:	f7ff fbd6 	bl	8000774 <HAL_GetTick>
 8000fc8:	0003      	movs	r3, r0
 8000fca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fcc:	e009      	b.n	8000fe2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fce:	f7ff fbd1 	bl	8000774 <HAL_GetTick>
 8000fd2:	0002      	movs	r2, r0
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	4a9b      	ldr	r2, [pc, #620]	; (8001248 <HAL_RCC_OscConfig+0x624>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e12b      	b.n	800123a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fe2:	4b98      	ldr	r3, [pc, #608]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8000fe4:	6a1b      	ldr	r3, [r3, #32]
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	4013      	ands	r3, r2
 8000fea:	d0f0      	beq.n	8000fce <HAL_RCC_OscConfig+0x3aa>
 8000fec:	e013      	b.n	8001016 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fee:	f7ff fbc1 	bl	8000774 <HAL_GetTick>
 8000ff2:	0003      	movs	r3, r0
 8000ff4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ff6:	e009      	b.n	800100c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ff8:	f7ff fbbc 	bl	8000774 <HAL_GetTick>
 8000ffc:	0002      	movs	r2, r0
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	4a91      	ldr	r2, [pc, #580]	; (8001248 <HAL_RCC_OscConfig+0x624>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d901      	bls.n	800100c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e116      	b.n	800123a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800100c:	4b8d      	ldr	r3, [pc, #564]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	2202      	movs	r2, #2
 8001012:	4013      	ands	r3, r2
 8001014:	d1f0      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001016:	231f      	movs	r3, #31
 8001018:	18fb      	adds	r3, r7, r3
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d105      	bne.n	800102c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001020:	4b88      	ldr	r3, [pc, #544]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001022:	69da      	ldr	r2, [r3, #28]
 8001024:	4b87      	ldr	r3, [pc, #540]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001026:	4989      	ldr	r1, [pc, #548]	; (800124c <HAL_RCC_OscConfig+0x628>)
 8001028:	400a      	ands	r2, r1
 800102a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2210      	movs	r2, #16
 8001032:	4013      	ands	r3, r2
 8001034:	d063      	beq.n	80010fe <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d12a      	bne.n	8001094 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800103e:	4b81      	ldr	r3, [pc, #516]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001042:	4b80      	ldr	r3, [pc, #512]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001044:	2104      	movs	r1, #4
 8001046:	430a      	orrs	r2, r1
 8001048:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800104a:	4b7e      	ldr	r3, [pc, #504]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 800104c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800104e:	4b7d      	ldr	r3, [pc, #500]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001050:	2101      	movs	r1, #1
 8001052:	430a      	orrs	r2, r1
 8001054:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001056:	f7ff fb8d 	bl	8000774 <HAL_GetTick>
 800105a:	0003      	movs	r3, r0
 800105c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001060:	f7ff fb88 	bl	8000774 <HAL_GetTick>
 8001064:	0002      	movs	r2, r0
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e0e3      	b.n	800123a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001072:	4b74      	ldr	r3, [pc, #464]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001076:	2202      	movs	r2, #2
 8001078:	4013      	ands	r3, r2
 800107a:	d0f1      	beq.n	8001060 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800107c:	4b71      	ldr	r3, [pc, #452]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 800107e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001080:	22f8      	movs	r2, #248	; 0xf8
 8001082:	4393      	bics	r3, r2
 8001084:	0019      	movs	r1, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	00da      	lsls	r2, r3, #3
 800108c:	4b6d      	ldr	r3, [pc, #436]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 800108e:	430a      	orrs	r2, r1
 8001090:	635a      	str	r2, [r3, #52]	; 0x34
 8001092:	e034      	b.n	80010fe <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	3305      	adds	r3, #5
 800109a:	d111      	bne.n	80010c0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800109c:	4b69      	ldr	r3, [pc, #420]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 800109e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010a0:	4b68      	ldr	r3, [pc, #416]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 80010a2:	2104      	movs	r1, #4
 80010a4:	438a      	bics	r2, r1
 80010a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80010a8:	4b66      	ldr	r3, [pc, #408]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 80010aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ac:	22f8      	movs	r2, #248	; 0xf8
 80010ae:	4393      	bics	r3, r2
 80010b0:	0019      	movs	r1, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	00da      	lsls	r2, r3, #3
 80010b8:	4b62      	ldr	r3, [pc, #392]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 80010ba:	430a      	orrs	r2, r1
 80010bc:	635a      	str	r2, [r3, #52]	; 0x34
 80010be:	e01e      	b.n	80010fe <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80010c0:	4b60      	ldr	r3, [pc, #384]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 80010c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010c4:	4b5f      	ldr	r3, [pc, #380]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 80010c6:	2104      	movs	r1, #4
 80010c8:	430a      	orrs	r2, r1
 80010ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80010cc:	4b5d      	ldr	r3, [pc, #372]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 80010ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d0:	4b5c      	ldr	r3, [pc, #368]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 80010d2:	2101      	movs	r1, #1
 80010d4:	438a      	bics	r2, r1
 80010d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d8:	f7ff fb4c 	bl	8000774 <HAL_GetTick>
 80010dc:	0003      	movs	r3, r0
 80010de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010e0:	e008      	b.n	80010f4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010e2:	f7ff fb47 	bl	8000774 <HAL_GetTick>
 80010e6:	0002      	movs	r2, r0
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e0a2      	b.n	800123a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010f4:	4b53      	ldr	r3, [pc, #332]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 80010f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f8:	2202      	movs	r2, #2
 80010fa:	4013      	ands	r3, r2
 80010fc:	d1f1      	bne.n	80010e2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d100      	bne.n	8001108 <HAL_RCC_OscConfig+0x4e4>
 8001106:	e097      	b.n	8001238 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001108:	4b4e      	ldr	r3, [pc, #312]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	220c      	movs	r2, #12
 800110e:	4013      	ands	r3, r2
 8001110:	2b08      	cmp	r3, #8
 8001112:	d100      	bne.n	8001116 <HAL_RCC_OscConfig+0x4f2>
 8001114:	e06b      	b.n	80011ee <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a1b      	ldr	r3, [r3, #32]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d14c      	bne.n	80011b8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800111e:	4b49      	ldr	r3, [pc, #292]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	4b48      	ldr	r3, [pc, #288]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001124:	494a      	ldr	r1, [pc, #296]	; (8001250 <HAL_RCC_OscConfig+0x62c>)
 8001126:	400a      	ands	r2, r1
 8001128:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112a:	f7ff fb23 	bl	8000774 <HAL_GetTick>
 800112e:	0003      	movs	r3, r0
 8001130:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001134:	f7ff fb1e 	bl	8000774 <HAL_GetTick>
 8001138:	0002      	movs	r2, r0
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e079      	b.n	800123a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001146:	4b3f      	ldr	r3, [pc, #252]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	2380      	movs	r3, #128	; 0x80
 800114c:	049b      	lsls	r3, r3, #18
 800114e:	4013      	ands	r3, r2
 8001150:	d1f0      	bne.n	8001134 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001152:	4b3c      	ldr	r3, [pc, #240]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001156:	220f      	movs	r2, #15
 8001158:	4393      	bics	r3, r2
 800115a:	0019      	movs	r1, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001160:	4b38      	ldr	r3, [pc, #224]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001162:	430a      	orrs	r2, r1
 8001164:	62da      	str	r2, [r3, #44]	; 0x2c
 8001166:	4b37      	ldr	r3, [pc, #220]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	4a3a      	ldr	r2, [pc, #232]	; (8001254 <HAL_RCC_OscConfig+0x630>)
 800116c:	4013      	ands	r3, r2
 800116e:	0019      	movs	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	431a      	orrs	r2, r3
 800117a:	4b32      	ldr	r3, [pc, #200]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 800117c:	430a      	orrs	r2, r1
 800117e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001180:	4b30      	ldr	r3, [pc, #192]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b2f      	ldr	r3, [pc, #188]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001186:	2180      	movs	r1, #128	; 0x80
 8001188:	0449      	lsls	r1, r1, #17
 800118a:	430a      	orrs	r2, r1
 800118c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118e:	f7ff faf1 	bl	8000774 <HAL_GetTick>
 8001192:	0003      	movs	r3, r0
 8001194:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001196:	e008      	b.n	80011aa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001198:	f7ff faec 	bl	8000774 <HAL_GetTick>
 800119c:	0002      	movs	r2, r0
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e047      	b.n	800123a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011aa:	4b26      	ldr	r3, [pc, #152]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	2380      	movs	r3, #128	; 0x80
 80011b0:	049b      	lsls	r3, r3, #18
 80011b2:	4013      	ands	r3, r2
 80011b4:	d0f0      	beq.n	8001198 <HAL_RCC_OscConfig+0x574>
 80011b6:	e03f      	b.n	8001238 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011b8:	4b22      	ldr	r3, [pc, #136]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4b21      	ldr	r3, [pc, #132]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 80011be:	4924      	ldr	r1, [pc, #144]	; (8001250 <HAL_RCC_OscConfig+0x62c>)
 80011c0:	400a      	ands	r2, r1
 80011c2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c4:	f7ff fad6 	bl	8000774 <HAL_GetTick>
 80011c8:	0003      	movs	r3, r0
 80011ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011cc:	e008      	b.n	80011e0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011ce:	f7ff fad1 	bl	8000774 <HAL_GetTick>
 80011d2:	0002      	movs	r2, r0
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e02c      	b.n	800123a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e0:	4b18      	ldr	r3, [pc, #96]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	049b      	lsls	r3, r3, #18
 80011e8:	4013      	ands	r3, r2
 80011ea:	d1f0      	bne.n	80011ce <HAL_RCC_OscConfig+0x5aa>
 80011ec:	e024      	b.n	8001238 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6a1b      	ldr	r3, [r3, #32]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d101      	bne.n	80011fa <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e01f      	b.n	800123a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80011fa:	4b12      	ldr	r3, [pc, #72]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001200:	4b10      	ldr	r3, [pc, #64]	; (8001244 <HAL_RCC_OscConfig+0x620>)
 8001202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001204:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	2380      	movs	r3, #128	; 0x80
 800120a:	025b      	lsls	r3, r3, #9
 800120c:	401a      	ands	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001212:	429a      	cmp	r2, r3
 8001214:	d10e      	bne.n	8001234 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	220f      	movs	r2, #15
 800121a:	401a      	ands	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001220:	429a      	cmp	r2, r3
 8001222:	d107      	bne.n	8001234 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	23f0      	movs	r3, #240	; 0xf0
 8001228:	039b      	lsls	r3, r3, #14
 800122a:	401a      	ands	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001230:	429a      	cmp	r2, r3
 8001232:	d001      	beq.n	8001238 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e000      	b.n	800123a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	0018      	movs	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	b008      	add	sp, #32
 8001240:	bd80      	pop	{r7, pc}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	40021000 	.word	0x40021000
 8001248:	00001388 	.word	0x00001388
 800124c:	efffffff 	.word	0xefffffff
 8001250:	feffffff 	.word	0xfeffffff
 8001254:	ffc2ffff 	.word	0xffc2ffff

08001258 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e0b3      	b.n	80013d4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800126c:	4b5b      	ldr	r3, [pc, #364]	; (80013dc <HAL_RCC_ClockConfig+0x184>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2201      	movs	r2, #1
 8001272:	4013      	ands	r3, r2
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	429a      	cmp	r2, r3
 8001278:	d911      	bls.n	800129e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800127a:	4b58      	ldr	r3, [pc, #352]	; (80013dc <HAL_RCC_ClockConfig+0x184>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2201      	movs	r2, #1
 8001280:	4393      	bics	r3, r2
 8001282:	0019      	movs	r1, r3
 8001284:	4b55      	ldr	r3, [pc, #340]	; (80013dc <HAL_RCC_ClockConfig+0x184>)
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	430a      	orrs	r2, r1
 800128a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800128c:	4b53      	ldr	r3, [pc, #332]	; (80013dc <HAL_RCC_ClockConfig+0x184>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2201      	movs	r2, #1
 8001292:	4013      	ands	r3, r2
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	d001      	beq.n	800129e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e09a      	b.n	80013d4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2202      	movs	r2, #2
 80012a4:	4013      	ands	r3, r2
 80012a6:	d015      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2204      	movs	r2, #4
 80012ae:	4013      	ands	r3, r2
 80012b0:	d006      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80012b2:	4b4b      	ldr	r3, [pc, #300]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	4b4a      	ldr	r3, [pc, #296]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 80012b8:	21e0      	movs	r1, #224	; 0xe0
 80012ba:	00c9      	lsls	r1, r1, #3
 80012bc:	430a      	orrs	r2, r1
 80012be:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012c0:	4b47      	ldr	r3, [pc, #284]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	22f0      	movs	r2, #240	; 0xf0
 80012c6:	4393      	bics	r3, r2
 80012c8:	0019      	movs	r1, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	4b44      	ldr	r3, [pc, #272]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 80012d0:	430a      	orrs	r2, r1
 80012d2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2201      	movs	r2, #1
 80012da:	4013      	ands	r3, r2
 80012dc:	d040      	beq.n	8001360 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d107      	bne.n	80012f6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e6:	4b3e      	ldr	r3, [pc, #248]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	029b      	lsls	r3, r3, #10
 80012ee:	4013      	ands	r3, r2
 80012f0:	d114      	bne.n	800131c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e06e      	b.n	80013d4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d107      	bne.n	800130e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012fe:	4b38      	ldr	r3, [pc, #224]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	2380      	movs	r3, #128	; 0x80
 8001304:	049b      	lsls	r3, r3, #18
 8001306:	4013      	ands	r3, r2
 8001308:	d108      	bne.n	800131c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e062      	b.n	80013d4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800130e:	4b34      	ldr	r3, [pc, #208]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2202      	movs	r2, #2
 8001314:	4013      	ands	r3, r2
 8001316:	d101      	bne.n	800131c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e05b      	b.n	80013d4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800131c:	4b30      	ldr	r3, [pc, #192]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2203      	movs	r2, #3
 8001322:	4393      	bics	r3, r2
 8001324:	0019      	movs	r1, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 800132c:	430a      	orrs	r2, r1
 800132e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001330:	f7ff fa20 	bl	8000774 <HAL_GetTick>
 8001334:	0003      	movs	r3, r0
 8001336:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001338:	e009      	b.n	800134e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800133a:	f7ff fa1b 	bl	8000774 <HAL_GetTick>
 800133e:	0002      	movs	r2, r0
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	4a27      	ldr	r2, [pc, #156]	; (80013e4 <HAL_RCC_ClockConfig+0x18c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d901      	bls.n	800134e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e042      	b.n	80013d4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800134e:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	220c      	movs	r2, #12
 8001354:	401a      	ands	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	429a      	cmp	r2, r3
 800135e:	d1ec      	bne.n	800133a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001360:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <HAL_RCC_ClockConfig+0x184>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2201      	movs	r2, #1
 8001366:	4013      	ands	r3, r2
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	429a      	cmp	r2, r3
 800136c:	d211      	bcs.n	8001392 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_RCC_ClockConfig+0x184>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2201      	movs	r2, #1
 8001374:	4393      	bics	r3, r2
 8001376:	0019      	movs	r1, r3
 8001378:	4b18      	ldr	r3, [pc, #96]	; (80013dc <HAL_RCC_ClockConfig+0x184>)
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	430a      	orrs	r2, r1
 800137e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001380:	4b16      	ldr	r3, [pc, #88]	; (80013dc <HAL_RCC_ClockConfig+0x184>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	4013      	ands	r3, r2
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	429a      	cmp	r2, r3
 800138c:	d001      	beq.n	8001392 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e020      	b.n	80013d4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2204      	movs	r2, #4
 8001398:	4013      	ands	r3, r2
 800139a:	d009      	beq.n	80013b0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800139c:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	4a11      	ldr	r2, [pc, #68]	; (80013e8 <HAL_RCC_ClockConfig+0x190>)
 80013a2:	4013      	ands	r3, r2
 80013a4:	0019      	movs	r1, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68da      	ldr	r2, [r3, #12]
 80013aa:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 80013ac:	430a      	orrs	r2, r1
 80013ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80013b0:	f000 f820 	bl	80013f4 <HAL_RCC_GetSysClockFreq>
 80013b4:	0001      	movs	r1, r0
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <HAL_RCC_ClockConfig+0x188>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	220f      	movs	r2, #15
 80013be:	4013      	ands	r3, r2
 80013c0:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <HAL_RCC_ClockConfig+0x194>)
 80013c2:	5cd3      	ldrb	r3, [r2, r3]
 80013c4:	000a      	movs	r2, r1
 80013c6:	40da      	lsrs	r2, r3
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <HAL_RCC_ClockConfig+0x198>)
 80013ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80013cc:	2003      	movs	r0, #3
 80013ce:	f7ff f98b 	bl	80006e8 <HAL_InitTick>
  
  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	0018      	movs	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b004      	add	sp, #16
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40022000 	.word	0x40022000
 80013e0:	40021000 	.word	0x40021000
 80013e4:	00001388 	.word	0x00001388
 80013e8:	fffff8ff 	.word	0xfffff8ff
 80013ec:	08002290 	.word	0x08002290
 80013f0:	20000000 	.word	0x20000000

080013f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
 8001406:	2300      	movs	r3, #0
 8001408:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800140e:	4b20      	ldr	r3, [pc, #128]	; (8001490 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	220c      	movs	r2, #12
 8001418:	4013      	ands	r3, r2
 800141a:	2b04      	cmp	r3, #4
 800141c:	d002      	beq.n	8001424 <HAL_RCC_GetSysClockFreq+0x30>
 800141e:	2b08      	cmp	r3, #8
 8001420:	d003      	beq.n	800142a <HAL_RCC_GetSysClockFreq+0x36>
 8001422:	e02c      	b.n	800147e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001426:	613b      	str	r3, [r7, #16]
      break;
 8001428:	e02c      	b.n	8001484 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	0c9b      	lsrs	r3, r3, #18
 800142e:	220f      	movs	r2, #15
 8001430:	4013      	ands	r3, r2
 8001432:	4a19      	ldr	r2, [pc, #100]	; (8001498 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001434:	5cd3      	ldrb	r3, [r2, r3]
 8001436:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001438:	4b15      	ldr	r3, [pc, #84]	; (8001490 <HAL_RCC_GetSysClockFreq+0x9c>)
 800143a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143c:	220f      	movs	r2, #15
 800143e:	4013      	ands	r3, r2
 8001440:	4a16      	ldr	r2, [pc, #88]	; (800149c <HAL_RCC_GetSysClockFreq+0xa8>)
 8001442:	5cd3      	ldrb	r3, [r2, r3]
 8001444:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	025b      	lsls	r3, r3, #9
 800144c:	4013      	ands	r3, r2
 800144e:	d009      	beq.n	8001464 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001450:	68b9      	ldr	r1, [r7, #8]
 8001452:	4810      	ldr	r0, [pc, #64]	; (8001494 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001454:	f7fe fe58 	bl	8000108 <__udivsi3>
 8001458:	0003      	movs	r3, r0
 800145a:	001a      	movs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4353      	muls	r3, r2
 8001460:	617b      	str	r3, [r7, #20]
 8001462:	e009      	b.n	8001478 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001464:	6879      	ldr	r1, [r7, #4]
 8001466:	000a      	movs	r2, r1
 8001468:	0152      	lsls	r2, r2, #5
 800146a:	1a52      	subs	r2, r2, r1
 800146c:	0193      	lsls	r3, r2, #6
 800146e:	1a9b      	subs	r3, r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	185b      	adds	r3, r3, r1
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	613b      	str	r3, [r7, #16]
      break;
 800147c:	e002      	b.n	8001484 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001480:	613b      	str	r3, [r7, #16]
      break;
 8001482:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001484:	693b      	ldr	r3, [r7, #16]
}
 8001486:	0018      	movs	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	b006      	add	sp, #24
 800148c:	bd80      	pop	{r7, pc}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	40021000 	.word	0x40021000
 8001494:	007a1200 	.word	0x007a1200
 8001498:	080022a0 	.word	0x080022a0
 800149c:	080022b0 	.word	0x080022b0

080014a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e042      	b.n	8001538 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	223d      	movs	r2, #61	; 0x3d
 80014b6:	5c9b      	ldrb	r3, [r3, r2]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d107      	bne.n	80014ce <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	223c      	movs	r2, #60	; 0x3c
 80014c2:	2100      	movs	r1, #0
 80014c4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	0018      	movs	r0, r3
 80014ca:	f7ff f83f 	bl	800054c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	223d      	movs	r2, #61	; 0x3d
 80014d2:	2102      	movs	r1, #2
 80014d4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3304      	adds	r3, #4
 80014de:	0019      	movs	r1, r3
 80014e0:	0010      	movs	r0, r2
 80014e2:	f000 fb65 	bl	8001bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2246      	movs	r2, #70	; 0x46
 80014ea:	2101      	movs	r1, #1
 80014ec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	223e      	movs	r2, #62	; 0x3e
 80014f2:	2101      	movs	r1, #1
 80014f4:	5499      	strb	r1, [r3, r2]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	223f      	movs	r2, #63	; 0x3f
 80014fa:	2101      	movs	r1, #1
 80014fc:	5499      	strb	r1, [r3, r2]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2240      	movs	r2, #64	; 0x40
 8001502:	2101      	movs	r1, #1
 8001504:	5499      	strb	r1, [r3, r2]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2241      	movs	r2, #65	; 0x41
 800150a:	2101      	movs	r1, #1
 800150c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2242      	movs	r2, #66	; 0x42
 8001512:	2101      	movs	r1, #1
 8001514:	5499      	strb	r1, [r3, r2]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2243      	movs	r2, #67	; 0x43
 800151a:	2101      	movs	r1, #1
 800151c:	5499      	strb	r1, [r3, r2]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2244      	movs	r2, #68	; 0x44
 8001522:	2101      	movs	r1, #1
 8001524:	5499      	strb	r1, [r3, r2]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2245      	movs	r2, #69	; 0x45
 800152a:	2101      	movs	r1, #1
 800152c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	223d      	movs	r2, #61	; 0x3d
 8001532:	2101      	movs	r1, #1
 8001534:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	0018      	movs	r0, r3
 800153a:	46bd      	mov	sp, r7
 800153c:	b002      	add	sp, #8
 800153e:	bd80      	pop	{r7, pc}

08001540 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	223d      	movs	r2, #61	; 0x3d
 800154c:	5c9b      	ldrb	r3, [r3, r2]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b01      	cmp	r3, #1
 8001552:	d001      	beq.n	8001558 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e030      	b.n	80015ba <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	223d      	movs	r2, #61	; 0x3d
 800155c:	2102      	movs	r1, #2
 800155e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68da      	ldr	r2, [r3, #12]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2101      	movs	r1, #1
 800156c:	430a      	orrs	r2, r1
 800156e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a13      	ldr	r2, [pc, #76]	; (80015c4 <HAL_TIM_Base_Start_IT+0x84>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d004      	beq.n	8001584 <HAL_TIM_Base_Start_IT+0x44>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <HAL_TIM_Base_Start_IT+0x88>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d111      	bne.n	80015a8 <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	2207      	movs	r2, #7
 800158c:	4013      	ands	r3, r2
 800158e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2b06      	cmp	r3, #6
 8001594:	d010      	beq.n	80015b8 <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2101      	movs	r1, #1
 80015a2:	430a      	orrs	r2, r1
 80015a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015a6:	e007      	b.n	80015b8 <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2101      	movs	r1, #1
 80015b4:	430a      	orrs	r2, r1
 80015b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	0018      	movs	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	b004      	add	sp, #16
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	40012c00 	.word	0x40012c00
 80015c8:	40000400 	.word	0x40000400

080015cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e042      	b.n	8001664 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	223d      	movs	r2, #61	; 0x3d
 80015e2:	5c9b      	ldrb	r3, [r3, r2]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d107      	bne.n	80015fa <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	223c      	movs	r2, #60	; 0x3c
 80015ee:	2100      	movs	r1, #0
 80015f0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	0018      	movs	r0, r3
 80015f6:	f7fe ff8b 	bl	8000510 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	223d      	movs	r2, #61	; 0x3d
 80015fe:	2102      	movs	r1, #2
 8001600:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3304      	adds	r3, #4
 800160a:	0019      	movs	r1, r3
 800160c:	0010      	movs	r0, r2
 800160e:	f000 facf 	bl	8001bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2246      	movs	r2, #70	; 0x46
 8001616:	2101      	movs	r1, #1
 8001618:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	223e      	movs	r2, #62	; 0x3e
 800161e:	2101      	movs	r1, #1
 8001620:	5499      	strb	r1, [r3, r2]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	223f      	movs	r2, #63	; 0x3f
 8001626:	2101      	movs	r1, #1
 8001628:	5499      	strb	r1, [r3, r2]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2240      	movs	r2, #64	; 0x40
 800162e:	2101      	movs	r1, #1
 8001630:	5499      	strb	r1, [r3, r2]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2241      	movs	r2, #65	; 0x41
 8001636:	2101      	movs	r1, #1
 8001638:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2242      	movs	r2, #66	; 0x42
 800163e:	2101      	movs	r1, #1
 8001640:	5499      	strb	r1, [r3, r2]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2243      	movs	r2, #67	; 0x43
 8001646:	2101      	movs	r1, #1
 8001648:	5499      	strb	r1, [r3, r2]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2244      	movs	r2, #68	; 0x44
 800164e:	2101      	movs	r1, #1
 8001650:	5499      	strb	r1, [r3, r2]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2245      	movs	r2, #69	; 0x45
 8001656:	2101      	movs	r1, #1
 8001658:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	223d      	movs	r2, #61	; 0x3d
 800165e:	2101      	movs	r1, #1
 8001660:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	0018      	movs	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	b002      	add	sp, #8
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d108      	bne.n	800168e <HAL_TIM_PWM_Start+0x22>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	223e      	movs	r2, #62	; 0x3e
 8001680:	5c9b      	ldrb	r3, [r3, r2]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	3b01      	subs	r3, #1
 8001686:	1e5a      	subs	r2, r3, #1
 8001688:	4193      	sbcs	r3, r2
 800168a:	b2db      	uxtb	r3, r3
 800168c:	e01f      	b.n	80016ce <HAL_TIM_PWM_Start+0x62>
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	2b04      	cmp	r3, #4
 8001692:	d108      	bne.n	80016a6 <HAL_TIM_PWM_Start+0x3a>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	223f      	movs	r2, #63	; 0x3f
 8001698:	5c9b      	ldrb	r3, [r3, r2]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	3b01      	subs	r3, #1
 800169e:	1e5a      	subs	r2, r3, #1
 80016a0:	4193      	sbcs	r3, r2
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	e013      	b.n	80016ce <HAL_TIM_PWM_Start+0x62>
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	2b08      	cmp	r3, #8
 80016aa:	d108      	bne.n	80016be <HAL_TIM_PWM_Start+0x52>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2240      	movs	r2, #64	; 0x40
 80016b0:	5c9b      	ldrb	r3, [r3, r2]
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	3b01      	subs	r3, #1
 80016b6:	1e5a      	subs	r2, r3, #1
 80016b8:	4193      	sbcs	r3, r2
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	e007      	b.n	80016ce <HAL_TIM_PWM_Start+0x62>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2241      	movs	r2, #65	; 0x41
 80016c2:	5c9b      	ldrb	r3, [r3, r2]
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	3b01      	subs	r3, #1
 80016c8:	1e5a      	subs	r2, r3, #1
 80016ca:	4193      	sbcs	r3, r2
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e064      	b.n	80017a0 <HAL_TIM_PWM_Start+0x134>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d104      	bne.n	80016e6 <HAL_TIM_PWM_Start+0x7a>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	223e      	movs	r2, #62	; 0x3e
 80016e0:	2102      	movs	r1, #2
 80016e2:	5499      	strb	r1, [r3, r2]
 80016e4:	e013      	b.n	800170e <HAL_TIM_PWM_Start+0xa2>
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d104      	bne.n	80016f6 <HAL_TIM_PWM_Start+0x8a>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	223f      	movs	r2, #63	; 0x3f
 80016f0:	2102      	movs	r1, #2
 80016f2:	5499      	strb	r1, [r3, r2]
 80016f4:	e00b      	b.n	800170e <HAL_TIM_PWM_Start+0xa2>
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	2b08      	cmp	r3, #8
 80016fa:	d104      	bne.n	8001706 <HAL_TIM_PWM_Start+0x9a>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2240      	movs	r2, #64	; 0x40
 8001700:	2102      	movs	r1, #2
 8001702:	5499      	strb	r1, [r3, r2]
 8001704:	e003      	b.n	800170e <HAL_TIM_PWM_Start+0xa2>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2241      	movs	r2, #65	; 0x41
 800170a:	2102      	movs	r1, #2
 800170c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6839      	ldr	r1, [r7, #0]
 8001714:	2201      	movs	r2, #1
 8001716:	0018      	movs	r0, r3
 8001718:	f000 fc96 	bl	8002048 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a21      	ldr	r2, [pc, #132]	; (80017a8 <HAL_TIM_PWM_Start+0x13c>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d009      	beq.n	800173a <HAL_TIM_PWM_Start+0xce>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a20      	ldr	r2, [pc, #128]	; (80017ac <HAL_TIM_PWM_Start+0x140>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d004      	beq.n	800173a <HAL_TIM_PWM_Start+0xce>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a1e      	ldr	r2, [pc, #120]	; (80017b0 <HAL_TIM_PWM_Start+0x144>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d101      	bne.n	800173e <HAL_TIM_PWM_Start+0xd2>
 800173a:	2301      	movs	r3, #1
 800173c:	e000      	b.n	8001740 <HAL_TIM_PWM_Start+0xd4>
 800173e:	2300      	movs	r3, #0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d008      	beq.n	8001756 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2180      	movs	r1, #128	; 0x80
 8001750:	0209      	lsls	r1, r1, #8
 8001752:	430a      	orrs	r2, r1
 8001754:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a13      	ldr	r2, [pc, #76]	; (80017a8 <HAL_TIM_PWM_Start+0x13c>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d004      	beq.n	800176a <HAL_TIM_PWM_Start+0xfe>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a13      	ldr	r2, [pc, #76]	; (80017b4 <HAL_TIM_PWM_Start+0x148>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d111      	bne.n	800178e <HAL_TIM_PWM_Start+0x122>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2207      	movs	r2, #7
 8001772:	4013      	ands	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2b06      	cmp	r3, #6
 800177a:	d010      	beq.n	800179e <HAL_TIM_PWM_Start+0x132>
    {
      __HAL_TIM_ENABLE(htim);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2101      	movs	r1, #1
 8001788:	430a      	orrs	r2, r1
 800178a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800178c:	e007      	b.n	800179e <HAL_TIM_PWM_Start+0x132>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2101      	movs	r1, #1
 800179a:	430a      	orrs	r2, r1
 800179c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	0018      	movs	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b004      	add	sp, #16
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40012c00 	.word	0x40012c00
 80017ac:	40014400 	.word	0x40014400
 80017b0:	40014800 	.word	0x40014800
 80017b4:	40000400 	.word	0x40000400

080017b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	2202      	movs	r2, #2
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d124      	bne.n	8001818 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	2202      	movs	r2, #2
 80017d6:	4013      	ands	r3, r2
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d11d      	bne.n	8001818 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2203      	movs	r2, #3
 80017e2:	4252      	negs	r2, r2
 80017e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2201      	movs	r2, #1
 80017ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	2203      	movs	r2, #3
 80017f4:	4013      	ands	r3, r2
 80017f6:	d004      	beq.n	8001802 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	0018      	movs	r0, r3
 80017fc:	f000 f9c0 	bl	8001b80 <HAL_TIM_IC_CaptureCallback>
 8001800:	e007      	b.n	8001812 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	0018      	movs	r0, r3
 8001806:	f000 f9b3 	bl	8001b70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	0018      	movs	r0, r3
 800180e:	f000 f9bf 	bl	8001b90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	2204      	movs	r2, #4
 8001820:	4013      	ands	r3, r2
 8001822:	2b04      	cmp	r3, #4
 8001824:	d125      	bne.n	8001872 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	2204      	movs	r2, #4
 800182e:	4013      	ands	r3, r2
 8001830:	2b04      	cmp	r3, #4
 8001832:	d11e      	bne.n	8001872 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2205      	movs	r2, #5
 800183a:	4252      	negs	r2, r2
 800183c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2202      	movs	r2, #2
 8001842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	699a      	ldr	r2, [r3, #24]
 800184a:	23c0      	movs	r3, #192	; 0xc0
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4013      	ands	r3, r2
 8001850:	d004      	beq.n	800185c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	0018      	movs	r0, r3
 8001856:	f000 f993 	bl	8001b80 <HAL_TIM_IC_CaptureCallback>
 800185a:	e007      	b.n	800186c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	0018      	movs	r0, r3
 8001860:	f000 f986 	bl	8001b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	0018      	movs	r0, r3
 8001868:	f000 f992 	bl	8001b90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	2208      	movs	r2, #8
 800187a:	4013      	ands	r3, r2
 800187c:	2b08      	cmp	r3, #8
 800187e:	d124      	bne.n	80018ca <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	2208      	movs	r2, #8
 8001888:	4013      	ands	r3, r2
 800188a:	2b08      	cmp	r3, #8
 800188c:	d11d      	bne.n	80018ca <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2209      	movs	r2, #9
 8001894:	4252      	negs	r2, r2
 8001896:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2204      	movs	r2, #4
 800189c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	2203      	movs	r2, #3
 80018a6:	4013      	ands	r3, r2
 80018a8:	d004      	beq.n	80018b4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	0018      	movs	r0, r3
 80018ae:	f000 f967 	bl	8001b80 <HAL_TIM_IC_CaptureCallback>
 80018b2:	e007      	b.n	80018c4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	0018      	movs	r0, r3
 80018b8:	f000 f95a 	bl	8001b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	0018      	movs	r0, r3
 80018c0:	f000 f966 	bl	8001b90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	2210      	movs	r2, #16
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b10      	cmp	r3, #16
 80018d6:	d125      	bne.n	8001924 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	2210      	movs	r2, #16
 80018e0:	4013      	ands	r3, r2
 80018e2:	2b10      	cmp	r3, #16
 80018e4:	d11e      	bne.n	8001924 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2211      	movs	r2, #17
 80018ec:	4252      	negs	r2, r2
 80018ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2208      	movs	r2, #8
 80018f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	69da      	ldr	r2, [r3, #28]
 80018fc:	23c0      	movs	r3, #192	; 0xc0
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4013      	ands	r3, r2
 8001902:	d004      	beq.n	800190e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	0018      	movs	r0, r3
 8001908:	f000 f93a 	bl	8001b80 <HAL_TIM_IC_CaptureCallback>
 800190c:	e007      	b.n	800191e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	0018      	movs	r0, r3
 8001912:	f000 f92d 	bl	8001b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	0018      	movs	r0, r3
 800191a:	f000 f939 	bl	8001b90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	2201      	movs	r2, #1
 800192c:	4013      	ands	r3, r2
 800192e:	2b01      	cmp	r3, #1
 8001930:	d10f      	bne.n	8001952 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	2201      	movs	r2, #1
 800193a:	4013      	ands	r3, r2
 800193c:	2b01      	cmp	r3, #1
 800193e:	d108      	bne.n	8001952 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2202      	movs	r2, #2
 8001946:	4252      	negs	r2, r2
 8001948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	0018      	movs	r0, r3
 800194e:	f7fe fc67 	bl	8000220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	2280      	movs	r2, #128	; 0x80
 800195a:	4013      	ands	r3, r2
 800195c:	2b80      	cmp	r3, #128	; 0x80
 800195e:	d10f      	bne.n	8001980 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	2280      	movs	r2, #128	; 0x80
 8001968:	4013      	ands	r3, r2
 800196a:	2b80      	cmp	r3, #128	; 0x80
 800196c:	d108      	bne.n	8001980 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2281      	movs	r2, #129	; 0x81
 8001974:	4252      	negs	r2, r2
 8001976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	0018      	movs	r0, r3
 800197c:	f000 fbe2 	bl	8002144 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	2240      	movs	r2, #64	; 0x40
 8001988:	4013      	ands	r3, r2
 800198a:	2b40      	cmp	r3, #64	; 0x40
 800198c:	d10f      	bne.n	80019ae <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	2240      	movs	r2, #64	; 0x40
 8001996:	4013      	ands	r3, r2
 8001998:	2b40      	cmp	r3, #64	; 0x40
 800199a:	d108      	bne.n	80019ae <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2241      	movs	r2, #65	; 0x41
 80019a2:	4252      	negs	r2, r2
 80019a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	0018      	movs	r0, r3
 80019aa:	f000 f8f9 	bl	8001ba0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	2220      	movs	r2, #32
 80019b6:	4013      	ands	r3, r2
 80019b8:	2b20      	cmp	r3, #32
 80019ba:	d10f      	bne.n	80019dc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	2220      	movs	r2, #32
 80019c4:	4013      	ands	r3, r2
 80019c6:	2b20      	cmp	r3, #32
 80019c8:	d108      	bne.n	80019dc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2221      	movs	r2, #33	; 0x21
 80019d0:	4252      	negs	r2, r2
 80019d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	0018      	movs	r0, r3
 80019d8:	f000 fbac 	bl	8002134 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019dc:	46c0      	nop			; (mov r8, r8)
 80019de:	46bd      	mov	sp, r7
 80019e0:	b002      	add	sp, #8
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019f0:	2317      	movs	r3, #23
 80019f2:	18fb      	adds	r3, r7, r3
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	223c      	movs	r2, #60	; 0x3c
 80019fc:	5c9b      	ldrb	r3, [r3, r2]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d101      	bne.n	8001a06 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e0ad      	b.n	8001b62 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	223c      	movs	r2, #60	; 0x3c
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b0c      	cmp	r3, #12
 8001a12:	d100      	bne.n	8001a16 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001a14:	e076      	b.n	8001b04 <HAL_TIM_PWM_ConfigChannel+0x120>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b0c      	cmp	r3, #12
 8001a1a:	d900      	bls.n	8001a1e <HAL_TIM_PWM_ConfigChannel+0x3a>
 8001a1c:	e095      	b.n	8001b4a <HAL_TIM_PWM_ConfigChannel+0x166>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	d04e      	beq.n	8001ac2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	d900      	bls.n	8001a2c <HAL_TIM_PWM_ConfigChannel+0x48>
 8001a2a:	e08e      	b.n	8001b4a <HAL_TIM_PWM_ConfigChannel+0x166>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_TIM_PWM_ConfigChannel+0x56>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	d021      	beq.n	8001a7c <HAL_TIM_PWM_ConfigChannel+0x98>
 8001a38:	e087      	b.n	8001b4a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	0011      	movs	r1, r2
 8001a42:	0018      	movs	r0, r3
 8001a44:	f000 f920 	bl	8001c88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	699a      	ldr	r2, [r3, #24]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2108      	movs	r1, #8
 8001a54:	430a      	orrs	r2, r1
 8001a56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	699a      	ldr	r2, [r3, #24]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2104      	movs	r1, #4
 8001a64:	438a      	bics	r2, r1
 8001a66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6999      	ldr	r1, [r3, #24]
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	691a      	ldr	r2, [r3, #16]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	619a      	str	r2, [r3, #24]
      break;
 8001a7a:	e06b      	b.n	8001b54 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	68ba      	ldr	r2, [r7, #8]
 8001a82:	0011      	movs	r1, r2
 8001a84:	0018      	movs	r0, r3
 8001a86:	f000 f97d 	bl	8001d84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	699a      	ldr	r2, [r3, #24]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2180      	movs	r1, #128	; 0x80
 8001a96:	0109      	lsls	r1, r1, #4
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	699a      	ldr	r2, [r3, #24]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4931      	ldr	r1, [pc, #196]	; (8001b6c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001aa8:	400a      	ands	r2, r1
 8001aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6999      	ldr	r1, [r3, #24]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	021a      	lsls	r2, r3, #8
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	619a      	str	r2, [r3, #24]
      break;
 8001ac0:	e048      	b.n	8001b54 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	0011      	movs	r1, r2
 8001aca:	0018      	movs	r0, r3
 8001acc:	f000 f9d8 	bl	8001e80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	69da      	ldr	r2, [r3, #28]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2108      	movs	r1, #8
 8001adc:	430a      	orrs	r2, r1
 8001ade:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	69da      	ldr	r2, [r3, #28]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2104      	movs	r1, #4
 8001aec:	438a      	bics	r2, r1
 8001aee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	69d9      	ldr	r1, [r3, #28]
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	691a      	ldr	r2, [r3, #16]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	61da      	str	r2, [r3, #28]
      break;
 8001b02:	e027      	b.n	8001b54 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68ba      	ldr	r2, [r7, #8]
 8001b0a:	0011      	movs	r1, r2
 8001b0c:	0018      	movs	r0, r3
 8001b0e:	f000 fa37 	bl	8001f80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	69da      	ldr	r2, [r3, #28]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2180      	movs	r1, #128	; 0x80
 8001b1e:	0109      	lsls	r1, r1, #4
 8001b20:	430a      	orrs	r2, r1
 8001b22:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	69da      	ldr	r2, [r3, #28]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	490f      	ldr	r1, [pc, #60]	; (8001b6c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001b30:	400a      	ands	r2, r1
 8001b32:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	69d9      	ldr	r1, [r3, #28]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	021a      	lsls	r2, r3, #8
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	61da      	str	r2, [r3, #28]
      break;
 8001b48:	e004      	b.n	8001b54 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8001b4a:	2317      	movs	r3, #23
 8001b4c:	18fb      	adds	r3, r7, r3
 8001b4e:	2201      	movs	r2, #1
 8001b50:	701a      	strb	r2, [r3, #0]
      break;
 8001b52:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	223c      	movs	r2, #60	; 0x3c
 8001b58:	2100      	movs	r1, #0
 8001b5a:	5499      	strb	r1, [r3, r2]

  return status;
 8001b5c:	2317      	movs	r3, #23
 8001b5e:	18fb      	adds	r3, r7, r3
 8001b60:	781b      	ldrb	r3, [r3, #0]
}
 8001b62:	0018      	movs	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	b006      	add	sp, #24
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	fffffbff 	.word	0xfffffbff

08001b70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001b78:	46c0      	nop			; (mov r8, r8)
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	b002      	add	sp, #8
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b88:	46c0      	nop			; (mov r8, r8)
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	b002      	add	sp, #8
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b98:	46c0      	nop			; (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b002      	add	sp, #8
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ba8:	46c0      	nop			; (mov r8, r8)
 8001baa:	46bd      	mov	sp, r7
 8001bac:	b002      	add	sp, #8
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a2b      	ldr	r2, [pc, #172]	; (8001c70 <TIM_Base_SetConfig+0xc0>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d003      	beq.n	8001bd0 <TIM_Base_SetConfig+0x20>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a2a      	ldr	r2, [pc, #168]	; (8001c74 <TIM_Base_SetConfig+0xc4>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d108      	bne.n	8001be2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2270      	movs	r2, #112	; 0x70
 8001bd4:	4393      	bics	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a22      	ldr	r2, [pc, #136]	; (8001c70 <TIM_Base_SetConfig+0xc0>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d00f      	beq.n	8001c0a <TIM_Base_SetConfig+0x5a>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a21      	ldr	r2, [pc, #132]	; (8001c74 <TIM_Base_SetConfig+0xc4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d00b      	beq.n	8001c0a <TIM_Base_SetConfig+0x5a>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a20      	ldr	r2, [pc, #128]	; (8001c78 <TIM_Base_SetConfig+0xc8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d007      	beq.n	8001c0a <TIM_Base_SetConfig+0x5a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a1f      	ldr	r2, [pc, #124]	; (8001c7c <TIM_Base_SetConfig+0xcc>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d003      	beq.n	8001c0a <TIM_Base_SetConfig+0x5a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a1e      	ldr	r2, [pc, #120]	; (8001c80 <TIM_Base_SetConfig+0xd0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d108      	bne.n	8001c1c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	4a1d      	ldr	r2, [pc, #116]	; (8001c84 <TIM_Base_SetConfig+0xd4>)
 8001c0e:	4013      	ands	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2280      	movs	r2, #128	; 0x80
 8001c20:	4393      	bics	r3, r2
 8001c22:	001a      	movs	r2, r3
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a0a      	ldr	r2, [pc, #40]	; (8001c70 <TIM_Base_SetConfig+0xc0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d007      	beq.n	8001c5a <TIM_Base_SetConfig+0xaa>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a0b      	ldr	r2, [pc, #44]	; (8001c7c <TIM_Base_SetConfig+0xcc>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d003      	beq.n	8001c5a <TIM_Base_SetConfig+0xaa>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <TIM_Base_SetConfig+0xd0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d103      	bne.n	8001c62 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	691a      	ldr	r2, [r3, #16]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	615a      	str	r2, [r3, #20]
}
 8001c68:	46c0      	nop			; (mov r8, r8)
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	b004      	add	sp, #16
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40012c00 	.word	0x40012c00
 8001c74:	40000400 	.word	0x40000400
 8001c78:	40002000 	.word	0x40002000
 8001c7c:	40014400 	.word	0x40014400
 8001c80:	40014800 	.word	0x40014800
 8001c84:	fffffcff 	.word	0xfffffcff

08001c88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	2201      	movs	r2, #1
 8001c98:	4393      	bics	r3, r2
 8001c9a:	001a      	movs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2270      	movs	r2, #112	; 0x70
 8001cb6:	4393      	bics	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	4393      	bics	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	4393      	bics	r3, r2
 8001cd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a23      	ldr	r2, [pc, #140]	; (8001d70 <TIM_OC1_SetConfig+0xe8>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d007      	beq.n	8001cf6 <TIM_OC1_SetConfig+0x6e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a22      	ldr	r2, [pc, #136]	; (8001d74 <TIM_OC1_SetConfig+0xec>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d003      	beq.n	8001cf6 <TIM_OC1_SetConfig+0x6e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a21      	ldr	r2, [pc, #132]	; (8001d78 <TIM_OC1_SetConfig+0xf0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d10c      	bne.n	8001d10 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	2208      	movs	r2, #8
 8001cfa:	4393      	bics	r3, r2
 8001cfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	2204      	movs	r2, #4
 8001d0c:	4393      	bics	r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a17      	ldr	r2, [pc, #92]	; (8001d70 <TIM_OC1_SetConfig+0xe8>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d007      	beq.n	8001d28 <TIM_OC1_SetConfig+0xa0>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a16      	ldr	r2, [pc, #88]	; (8001d74 <TIM_OC1_SetConfig+0xec>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d003      	beq.n	8001d28 <TIM_OC1_SetConfig+0xa0>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a15      	ldr	r2, [pc, #84]	; (8001d78 <TIM_OC1_SetConfig+0xf0>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d111      	bne.n	8001d4c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	4a14      	ldr	r2, [pc, #80]	; (8001d7c <TIM_OC1_SetConfig+0xf4>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	4a13      	ldr	r2, [pc, #76]	; (8001d80 <TIM_OC1_SetConfig+0xf8>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	695b      	ldr	r3, [r3, #20]
 8001d3c:	693a      	ldr	r2, [r7, #16]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	697a      	ldr	r2, [r7, #20]
 8001d64:	621a      	str	r2, [r3, #32]
}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	b006      	add	sp, #24
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	40012c00 	.word	0x40012c00
 8001d74:	40014400 	.word	0x40014400
 8001d78:	40014800 	.word	0x40014800
 8001d7c:	fffffeff 	.word	0xfffffeff
 8001d80:	fffffdff 	.word	0xfffffdff

08001d84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	2210      	movs	r2, #16
 8001d94:	4393      	bics	r3, r2
 8001d96:	001a      	movs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4a2c      	ldr	r2, [pc, #176]	; (8001e64 <TIM_OC2_SetConfig+0xe0>)
 8001db2:	4013      	ands	r3, r2
 8001db4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4a2b      	ldr	r2, [pc, #172]	; (8001e68 <TIM_OC2_SetConfig+0xe4>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	021b      	lsls	r3, r3, #8
 8001dc4:	68fa      	ldr	r2, [r7, #12]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	2220      	movs	r2, #32
 8001dce:	4393      	bics	r3, r2
 8001dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	011b      	lsls	r3, r3, #4
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a22      	ldr	r2, [pc, #136]	; (8001e6c <TIM_OC2_SetConfig+0xe8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d10d      	bne.n	8001e02 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	2280      	movs	r2, #128	; 0x80
 8001dea:	4393      	bics	r3, r2
 8001dec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	2240      	movs	r2, #64	; 0x40
 8001dfe:	4393      	bics	r3, r2
 8001e00:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a19      	ldr	r2, [pc, #100]	; (8001e6c <TIM_OC2_SetConfig+0xe8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d007      	beq.n	8001e1a <TIM_OC2_SetConfig+0x96>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a18      	ldr	r2, [pc, #96]	; (8001e70 <TIM_OC2_SetConfig+0xec>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d003      	beq.n	8001e1a <TIM_OC2_SetConfig+0x96>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a17      	ldr	r2, [pc, #92]	; (8001e74 <TIM_OC2_SetConfig+0xf0>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d113      	bne.n	8001e42 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4a16      	ldr	r2, [pc, #88]	; (8001e78 <TIM_OC2_SetConfig+0xf4>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4a15      	ldr	r2, [pc, #84]	; (8001e7c <TIM_OC2_SetConfig+0xf8>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	693a      	ldr	r2, [r7, #16]
 8001e46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685a      	ldr	r2, [r3, #4]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	621a      	str	r2, [r3, #32]
}
 8001e5c:	46c0      	nop			; (mov r8, r8)
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	b006      	add	sp, #24
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	ffff8fff 	.word	0xffff8fff
 8001e68:	fffffcff 	.word	0xfffffcff
 8001e6c:	40012c00 	.word	0x40012c00
 8001e70:	40014400 	.word	0x40014400
 8001e74:	40014800 	.word	0x40014800
 8001e78:	fffffbff 	.word	0xfffffbff
 8001e7c:	fffff7ff 	.word	0xfffff7ff

08001e80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	4a33      	ldr	r2, [pc, #204]	; (8001f5c <TIM_OC3_SetConfig+0xdc>)
 8001e90:	401a      	ands	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2270      	movs	r2, #112	; 0x70
 8001eac:	4393      	bics	r3, r2
 8001eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	4393      	bics	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	4a26      	ldr	r2, [pc, #152]	; (8001f60 <TIM_OC3_SetConfig+0xe0>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a22      	ldr	r2, [pc, #136]	; (8001f64 <TIM_OC3_SetConfig+0xe4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d10d      	bne.n	8001efa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	4a21      	ldr	r2, [pc, #132]	; (8001f68 <TIM_OC3_SetConfig+0xe8>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	021b      	lsls	r3, r3, #8
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	4a1d      	ldr	r2, [pc, #116]	; (8001f6c <TIM_OC3_SetConfig+0xec>)
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a19      	ldr	r2, [pc, #100]	; (8001f64 <TIM_OC3_SetConfig+0xe4>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d007      	beq.n	8001f12 <TIM_OC3_SetConfig+0x92>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a1a      	ldr	r2, [pc, #104]	; (8001f70 <TIM_OC3_SetConfig+0xf0>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d003      	beq.n	8001f12 <TIM_OC3_SetConfig+0x92>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a19      	ldr	r2, [pc, #100]	; (8001f74 <TIM_OC3_SetConfig+0xf4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d113      	bne.n	8001f3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	4a18      	ldr	r2, [pc, #96]	; (8001f78 <TIM_OC3_SetConfig+0xf8>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4a17      	ldr	r2, [pc, #92]	; (8001f7c <TIM_OC3_SetConfig+0xfc>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	011b      	lsls	r3, r3, #4
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	621a      	str	r2, [r3, #32]
}
 8001f54:	46c0      	nop			; (mov r8, r8)
 8001f56:	46bd      	mov	sp, r7
 8001f58:	b006      	add	sp, #24
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	fffffeff 	.word	0xfffffeff
 8001f60:	fffffdff 	.word	0xfffffdff
 8001f64:	40012c00 	.word	0x40012c00
 8001f68:	fffff7ff 	.word	0xfffff7ff
 8001f6c:	fffffbff 	.word	0xfffffbff
 8001f70:	40014400 	.word	0x40014400
 8001f74:	40014800 	.word	0x40014800
 8001f78:	ffffefff 	.word	0xffffefff
 8001f7c:	ffffdfff 	.word	0xffffdfff

08001f80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a1b      	ldr	r3, [r3, #32]
 8001f8e:	4a26      	ldr	r2, [pc, #152]	; (8002028 <TIM_OC4_SetConfig+0xa8>)
 8001f90:	401a      	ands	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4a20      	ldr	r2, [pc, #128]	; (800202c <TIM_OC4_SetConfig+0xac>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	4a1f      	ldr	r2, [pc, #124]	; (8002030 <TIM_OC4_SetConfig+0xb0>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	021b      	lsls	r3, r3, #8
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4a1b      	ldr	r2, [pc, #108]	; (8002034 <TIM_OC4_SetConfig+0xb4>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	031b      	lsls	r3, r3, #12
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a17      	ldr	r2, [pc, #92]	; (8002038 <TIM_OC4_SetConfig+0xb8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d007      	beq.n	8001ff0 <TIM_OC4_SetConfig+0x70>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a16      	ldr	r2, [pc, #88]	; (800203c <TIM_OC4_SetConfig+0xbc>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d003      	beq.n	8001ff0 <TIM_OC4_SetConfig+0x70>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a15      	ldr	r2, [pc, #84]	; (8002040 <TIM_OC4_SetConfig+0xc0>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d109      	bne.n	8002004 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	4a14      	ldr	r2, [pc, #80]	; (8002044 <TIM_OC4_SetConfig+0xc4>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	019b      	lsls	r3, r3, #6
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	4313      	orrs	r3, r2
 8002002:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	621a      	str	r2, [r3, #32]
}
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	46bd      	mov	sp, r7
 8002022:	b006      	add	sp, #24
 8002024:	bd80      	pop	{r7, pc}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	ffffefff 	.word	0xffffefff
 800202c:	ffff8fff 	.word	0xffff8fff
 8002030:	fffffcff 	.word	0xfffffcff
 8002034:	ffffdfff 	.word	0xffffdfff
 8002038:	40012c00 	.word	0x40012c00
 800203c:	40014400 	.word	0x40014400
 8002040:	40014800 	.word	0x40014800
 8002044:	ffffbfff 	.word	0xffffbfff

08002048 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	221f      	movs	r2, #31
 8002058:	4013      	ands	r3, r2
 800205a:	2201      	movs	r2, #1
 800205c:	409a      	lsls	r2, r3
 800205e:	0013      	movs	r3, r2
 8002060:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	697a      	ldr	r2, [r7, #20]
 8002068:	43d2      	mvns	r2, r2
 800206a:	401a      	ands	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6a1a      	ldr	r2, [r3, #32]
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	211f      	movs	r1, #31
 8002078:	400b      	ands	r3, r1
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	4099      	lsls	r1, r3
 800207e:	000b      	movs	r3, r1
 8002080:	431a      	orrs	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	621a      	str	r2, [r3, #32]
}
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	46bd      	mov	sp, r7
 800208a:	b006      	add	sp, #24
 800208c:	bd80      	pop	{r7, pc}
	...

08002090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	223c      	movs	r2, #60	; 0x3c
 800209e:	5c9b      	ldrb	r3, [r3, r2]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80020a4:	2302      	movs	r3, #2
 80020a6:	e03c      	b.n	8002122 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	223c      	movs	r2, #60	; 0x3c
 80020ac:	2101      	movs	r1, #1
 80020ae:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	223d      	movs	r2, #61	; 0x3d
 80020b4:	2102      	movs	r1, #2
 80020b6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2270      	movs	r2, #112	; 0x70
 80020cc:	4393      	bics	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68fa      	ldr	r2, [r7, #12]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a11      	ldr	r2, [pc, #68]	; (800212c <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d004      	beq.n	80020f6 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a0f      	ldr	r2, [pc, #60]	; (8002130 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d10c      	bne.n	8002110 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	2280      	movs	r2, #128	; 0x80
 80020fa:	4393      	bics	r3, r2
 80020fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	4313      	orrs	r3, r2
 8002106:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	223d      	movs	r2, #61	; 0x3d
 8002114:	2101      	movs	r1, #1
 8002116:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	223c      	movs	r2, #60	; 0x3c
 800211c:	2100      	movs	r1, #0
 800211e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	0018      	movs	r0, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	b004      	add	sp, #16
 8002128:	bd80      	pop	{r7, pc}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	40012c00 	.word	0x40012c00
 8002130:	40000400 	.word	0x40000400

08002134 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800213c:	46c0      	nop			; (mov r8, r8)
 800213e:	46bd      	mov	sp, r7
 8002140:	b002      	add	sp, #8
 8002142:	bd80      	pop	{r7, pc}

08002144 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800214c:	46c0      	nop			; (mov r8, r8)
 800214e:	46bd      	mov	sp, r7
 8002150:	b002      	add	sp, #8
 8002152:	bd80      	pop	{r7, pc}

08002154 <memset>:
 8002154:	0003      	movs	r3, r0
 8002156:	1882      	adds	r2, r0, r2
 8002158:	4293      	cmp	r3, r2
 800215a:	d100      	bne.n	800215e <memset+0xa>
 800215c:	4770      	bx	lr
 800215e:	7019      	strb	r1, [r3, #0]
 8002160:	3301      	adds	r3, #1
 8002162:	e7f9      	b.n	8002158 <memset+0x4>

08002164 <__libc_init_array>:
 8002164:	b570      	push	{r4, r5, r6, lr}
 8002166:	2600      	movs	r6, #0
 8002168:	4c0c      	ldr	r4, [pc, #48]	; (800219c <__libc_init_array+0x38>)
 800216a:	4d0d      	ldr	r5, [pc, #52]	; (80021a0 <__libc_init_array+0x3c>)
 800216c:	1b64      	subs	r4, r4, r5
 800216e:	10a4      	asrs	r4, r4, #2
 8002170:	42a6      	cmp	r6, r4
 8002172:	d109      	bne.n	8002188 <__libc_init_array+0x24>
 8002174:	2600      	movs	r6, #0
 8002176:	f000 f819 	bl	80021ac <_init>
 800217a:	4c0a      	ldr	r4, [pc, #40]	; (80021a4 <__libc_init_array+0x40>)
 800217c:	4d0a      	ldr	r5, [pc, #40]	; (80021a8 <__libc_init_array+0x44>)
 800217e:	1b64      	subs	r4, r4, r5
 8002180:	10a4      	asrs	r4, r4, #2
 8002182:	42a6      	cmp	r6, r4
 8002184:	d105      	bne.n	8002192 <__libc_init_array+0x2e>
 8002186:	bd70      	pop	{r4, r5, r6, pc}
 8002188:	00b3      	lsls	r3, r6, #2
 800218a:	58eb      	ldr	r3, [r5, r3]
 800218c:	4798      	blx	r3
 800218e:	3601      	adds	r6, #1
 8002190:	e7ee      	b.n	8002170 <__libc_init_array+0xc>
 8002192:	00b3      	lsls	r3, r6, #2
 8002194:	58eb      	ldr	r3, [r5, r3]
 8002196:	4798      	blx	r3
 8002198:	3601      	adds	r6, #1
 800219a:	e7f2      	b.n	8002182 <__libc_init_array+0x1e>
 800219c:	080022c0 	.word	0x080022c0
 80021a0:	080022c0 	.word	0x080022c0
 80021a4:	080022c4 	.word	0x080022c4
 80021a8:	080022c0 	.word	0x080022c0

080021ac <_init>:
 80021ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021b2:	bc08      	pop	{r3}
 80021b4:	469e      	mov	lr, r3
 80021b6:	4770      	bx	lr

080021b8 <_fini>:
 80021b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021be:	bc08      	pop	{r3}
 80021c0:	469e      	mov	lr, r3
 80021c2:	4770      	bx	lr
